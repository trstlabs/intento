syntax = "proto3";

package intento.intent.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/trstlabs/intento/x/intent/types";
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Params defines the params for activeness of Flows on governance proposals.
message Params {
  option (gogoproto.goproto_stringer) = false;
  // Commision rate percentage for returning remaining funds in flow fee account after final execution, e.g. 100 = 1X, 250 = 250
  int64 flow_funds_commission = 1;
  // Multiplier to the flexible flow gas fee in promille, e.g. 1000 = 1X, 2500 = 2,5x
  int64 flow_flex_fee_mul = 2;
  // Fixed burn fee per message execution to burn native denom
  int64 burn_fee_per_msg = 3;
  // Array of denoms that can be used for fee payment together with an amount
  repeated cosmos.base.v1beta1.Coin gas_fee_coins = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"gas_fee_coins\""
  ];
  //  Maximum period for a flow
  google.protobuf.Duration max_flow_duration = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "max_flow_duration,omitempty"
  ];
  //  Minimum period for a flow
  google.protobuf.Duration min_flow_duration = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "min_flow_duration,omitempty"
  ];
  //  Minimum period for a flow
  google.protobuf.Duration min_flow_interval = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "min_flow_interval,omitempty"
  ];
  // relayer rewards in uinto for each message class 0=Low,1=Medium, 2=High, 3=AuthZExec
  // Rewards are in uinto and topped up in the module account by alloc module.
  repeated ConnectionRelayerReward connection_rewards = 9;
}

message ConnectionRelayerReward {
  string connection_id = 1 [(gogoproto.customname) = "ConnectionID"]; // e.g. "connection-12"
  repeated int64 relayer_rewards = 2; // same format: 0=Low, 1=Medium, 2=High
}

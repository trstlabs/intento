syntax = "proto3";

package intento.intent.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "cosmos/msg/v1/msg.proto";
import "intento/intent/v1beta1/flow.proto";
import "intento/intent/v1beta1/hostedaccount.proto";
import "amino/amino.proto";
option go_package = "github.com/trstlabs/intento/x/intent/types";

// Msg defines the ica-authentication Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse) {
    option (google.api.http).post = "/intento/intent/v1beta1/register-account";
  }
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse) {
    option (google.api.http).post = "/intento/intent/v1beta1/submit-tx";
  }
  rpc SubmitFlow(MsgSubmitFlow) returns (MsgSubmitFlowResponse) {
    option (google.api.http).post = "/intento/intent/v1beta1/submit-flow";
  }
  rpc RegisterAccountAndSubmitFlow(MsgRegisterAccountAndSubmitFlow)
      returns (MsgRegisterAccountAndSubmitFlowResponse) {
    option (google.api.http).post =
        "/intento/intent/v1beta1/register-account-submit-flow";
  }
  rpc UpdateFlow(MsgUpdateFlow) returns (MsgUpdateFlowResponse) {
    option (google.api.http).post = "/intento/intent/v1beta1/update-flow";
  }
  rpc CreateHostedAccount(MsgCreateHostedAccount)
      returns (MsgCreateHostedAccountResponse) {
    option (google.api.http).post =
        "/intento/intent/v1beta1/create-hosted-account";
  }
  rpc UpdateHostedAccount(MsgUpdateHostedAccount)
      returns (MsgUpdateHostedAccountResponse) {
    option (google.api.http).post =
        "/intento/intent/v1beta1/update-hosted-account";
  }
}

// MsgRegisterAccount registers an interchain account for the given owner over
// the specified connection pair
message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "intent/MsgRegisterAccount";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string connection_id = 2;
  string version = 3;
}

// MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx creates and submits an arbitrary msg to be executed
// locally or using an interchain account
message MsgSubmitTx {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "intent/MsgRegisterAccount";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string connection_id = 2;
  google.protobuf.Any msg = 3;
}

// MsgSubmitTxResponse defines the MsgSubmitTx response type
message MsgSubmitTxResponse {}

// MsgSubmitFlow creates, submits and schedules an arbitrary msg
// to be executed locally or using an interchain account
message MsgSubmitFlow {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "intent/MsgSubmitFlow";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string label = 3;
  repeated google.protobuf.Any msgs = 4
      [ (cosmos_proto.accepts_interface) = "sdk.Msg" ];
  // duration defines the time that the code should run for
  string duration = 5;
  // start_at when set as a unix time after block inclusion, creates a custom
  // start time for execution
  uint64 start_at = 6;
  // interval defines the interval between auto_msg calls
  string interval = 7;
  // optional fees to be used for flow execution limiting the amount of fees
  // incurred
  repeated cosmos.base.v1beta1.Coin fee_funds = 8 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_funds\""
  ];
  // optional configuration parameters
  ExecutionConfiguration configuration = 9;
  // optional for interchain account
  string connection_id = 10;
  string host_connection_id = 11;
  // optional use of a hosted account
  HostedConfig hosted_config = 12;
  ExecutionConditions conditions = 14;
}

// MsgSubmitTxResponse defines the MsgSubmitTx response type
message MsgSubmitFlowResponse {}

// MsgRegisterAccountAndSubmitFlow creates an interchain account, submits and
// schedules an arbitrary msg to be executed by this interchain
// account
message MsgRegisterAccountAndSubmitFlow {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "intent/MsgRegisterAccountAndSubmitFlow";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string connection_id = 2;
  string label = 3;
  repeated google.protobuf.Any msgs = 4
      [ (cosmos_proto.accepts_interface) = "sdk.Msg" ];
  // duration defines the time that the code should run for
  string duration = 5;
  // start_at when set as a unix time after block inclusion, creates a custom
  // start time for execution
  uint64 start_at = 6;
  // interval defines the interval between auto_msg calls
  string interval = 7;
  // optional fees to be used for flow execution limiting the amount of fees
  // incurred
  repeated cosmos.base.v1beta1.Coin fee_funds = 8 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_funds\""
  ];
  // optional array of dependent txs that should be executed before execution is
  // allowed
  ExecutionConfiguration configuration = 9;
  string version = 10;
  string host_connection_id = 11;
  ExecutionConditions conditions = 12;
}

// MsgRegisterAccountAndSubmitFlowResponse defines the MsgSubmitTx response
// type
message MsgRegisterAccountAndSubmitFlowResponse {}

// MsgUpdateFlow updates an arbitrary msg to be executed locally
// or using an interchain account
message MsgUpdateFlow {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "intent/MsgUpdateFlow";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  uint64 id = 2 [ (gogoproto.customname) = "ID" ];
  string connection_id = 3;
  string label = 4;
  repeated google.protobuf.Any msgs = 5
      [ (cosmos_proto.accepts_interface) = "sdk.Msg" ];
  // end_time when set defines the time that the code should run for
  uint64 end_time = 6;
  // start_at when set as a unix time after block inclusion, creates a custom
  // start time for execution
  uint64 start_at = 7;
  // interval defines the interval between auto_msg calls
  string interval = 8;
  // add fees for flow execution, optional
  repeated cosmos.base.v1beta1.Coin fee_funds = 9 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_funds\""
  ];
  ExecutionConfiguration configuration = 10;
  HostedConfig hosted_config = 11;
  ExecutionConditions conditions = 12;
}

// MsgUpdateTxResponse defines the MsgUpdateTx response type
message MsgUpdateFlowResponse {}

message MsgCreateHostedAccount {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "intent/MsgCreateHostedAccount";
  option (gogoproto.goproto_getters) = false;
  string creator = 1;
  string connection_id = 2;
  string host_connection_id = 3;
  string version = 4;
  repeated cosmos.base.v1beta1.Coin fee_coins_suported = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message MsgCreateHostedAccountResponse { string address = 1; }

message MsgUpdateHostedAccount {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "intent/MsgUpdateHostedAccount";
  option (gogoproto.goproto_getters) = false;
  string admin = 1;
  string hosted_address = 2;
  string connection_id = 3;
  string host_connection_id = 4;
  HostFeeConfig host_fee_config = 5;
}

message MsgUpdateHostedAccountResponse {}

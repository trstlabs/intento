syntax = "proto3";

package intento.intent.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "intento/intent/v1beta1/flow.proto";
import "intento/intent/v1beta1/hostedaccount.proto";
import "intento/intent/v1beta1/params.proto";
option go_package = "github.com/trstlabs/intento/x/intent/types";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC querier service.
service Query {
  // QueryInterchainAccountFromAddress returns the interchain account for given
  // owner address on a given connection pair
  rpc InterchainAccountFromAddress(QueryInterchainAccountFromAddressRequest)
      returns (QueryInterchainAccountFromAddressResponse) {
    option (google.api.http).get = "/intento/intent/v1beta1/address-to-ica";
  }
  // Flow returns the auto-executing interchain account tx
  rpc Flow(QueryFlowRequest) returns (QueryFlowResponse) {
    option (google.api.http).get = "/intento/intent/v1beta1/flow/{id}";
  }
  // FlowHistory returns the flow history
  rpc FlowHistory(QueryFlowHistoryRequest)
      returns (QueryFlowHistoryResponse) {
    option (google.api.http).get =
        "/intento/intent/v1beta1/flow-history/{id}";
  }
  // Flows returns the all auto-executing interchain account messages
  rpc Flows(QueryFlowsRequest) returns (QueryFlowsResponse) {
    option (google.api.http).get = "/intento/intent/v1beta1/flows";
  }
  // FlowsForOwner returns the auto-executing interchain account messages for
  // given owner
  rpc FlowsForOwner(QueryFlowsForOwnerRequest)
      returns (QueryFlowsForOwnerResponse) {
    option (google.api.http).get =
        "/intento/intent/v1beta1/flows-for-owner/{owner}";
  }
  rpc HostedAccount(QueryHostedAccountRequest)
      returns (QueryHostedAccountResponse) {
    option (google.api.http).get =
        "/intento/intent/v1beta1/hosted-account/{address}";
  }

  rpc HostedAccounts(QueryHostedAccountsRequest)
      returns (QueryHostedAccountsResponse) {
    option (google.api.http).get = "/intento/intent/v1beta1/hosted-accounts";
  }

  rpc HostedAccountsByAdmin(QueryHostedAccountsByAdminRequest)
      returns (QueryHostedAccountsByAdminResponse) {
    option (google.api.http).get =
        "/intento/intent/v1beta1/hosted-accounts/{admin}";
  }

  // Params returns the total set of Intent parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/intento/intent/v1beta1/params";
  }
}

// QueryInterchainAccountFromAddressRequest is the request type for the
// Query/InterchainAccountAddress RPC
message QueryInterchainAccountFromAddressRequest {
  string owner = 1;
  string connection_id = 2;
}

// QueryInterchainAccountFromAddressResponse the response type for the
// Query/InterchainAccountAddress RPC
message QueryInterchainAccountFromAddressResponse {
  string interchain_account_address = 1
      [ (gogoproto.moretags) = "yaml:\"interchain_account_address\"" ];
}

// QueryFlowRequest is the request type for the Query/FlowRequest RPC
message QueryFlowRequest { string id = 1; }

// QueryFlowResponse the response type for the Query/FlowRequest RPC
message QueryFlowResponse {
  FlowInfo flow_info = 1 [ (gogoproto.nullable) = false ];
}

// QueryFlowHistoryRequest is the request type for the
// Query/QueryFlowHistoryRequest RPC
message QueryFlowHistoryRequest {
  // id of the flow
  string id = 1;
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryFlowHistoryResponse the response type for the
// Query/QueryFlowHistoryResponse RPC
message QueryFlowHistoryResponse {
  repeated FlowHistoryEntry history = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFlowsRequest is the request type for the Query/FlowsRequest RPC
message QueryFlowsRequest {
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryFlowsResponse the response type for the Query/FlowsRequest RPCÏ€
message QueryFlowsResponse {
  repeated FlowInfo flow_infos = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFlowsForOwnerRequest is the request type for the
// Query/FlowsForOwnerRequest RPC
message QueryFlowsForOwnerRequest {
  string owner = 1;
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryFlowsForOwnerResponse the response type for the
// Query/FlowsForOwnerRequest RPC
message QueryFlowsForOwnerResponse {
  repeated FlowInfo flow_infos = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryHostedAccount is the request type for the Query/Params RPC method.
message QueryHostedAccountRequest { string address = 1; }

// QueryHostedAccountResponse is the response type for the Query/HostedAccount
// RPC method.
message QueryHostedAccountResponse {
  // HostedAccount
  HostedAccount hosted_account = 1 [ (gogoproto.nullable) = false ];
}

// QueryHostedAccounts is the request type for the Query/HostedAccount RPC
// method.
message QueryHostedAccountsRequest {
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryHostedAccountsResponse is the response type for the Query/HostedAccount
// RPC method.
message QueryHostedAccountsResponse {
  // HostedAccounts
  repeated HostedAccount hosted_accounts = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryHostedAccountsByAdminRequest
message QueryHostedAccountsByAdminRequest {
  string admin = 1;
  // Pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryHostedAccountResponse is the response type for the Query/HostedAccount
// RPC method.
message QueryHostedAccountsByAdminResponse {
  // HostedAccounts
  repeated HostedAccount hosted_accounts = 1 [ (gogoproto.nullable) = false ];
  // Pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
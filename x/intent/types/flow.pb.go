// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intento/intent/v1/flow.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types2 "github.com/trstlabs/intento/x/interchainquery/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Comparison operators that can be used for various types.
type ComparisonOperator int32

const (
	ComparisonOperator_EQUAL         ComparisonOperator = 0
	ComparisonOperator_CONTAINS      ComparisonOperator = 1
	ComparisonOperator_NOT_CONTAINS  ComparisonOperator = 2
	ComparisonOperator_SMALLER_THAN  ComparisonOperator = 3
	ComparisonOperator_LARGER_THAN   ComparisonOperator = 4
	ComparisonOperator_GREATER_EQUAL ComparisonOperator = 5
	ComparisonOperator_LESS_EQUAL    ComparisonOperator = 6
	ComparisonOperator_STARTS_WITH   ComparisonOperator = 7
	ComparisonOperator_ENDS_WITH     ComparisonOperator = 8
	ComparisonOperator_NOT_EQUAL     ComparisonOperator = 9
)

var ComparisonOperator_name = map[int32]string{
	0: "EQUAL",
	1: "CONTAINS",
	2: "NOT_CONTAINS",
	3: "SMALLER_THAN",
	4: "LARGER_THAN",
	5: "GREATER_EQUAL",
	6: "LESS_EQUAL",
	7: "STARTS_WITH",
	8: "ENDS_WITH",
	9: "NOT_EQUAL",
}

var ComparisonOperator_value = map[string]int32{
	"EQUAL":         0,
	"CONTAINS":      1,
	"NOT_CONTAINS":  2,
	"SMALLER_THAN":  3,
	"LARGER_THAN":   4,
	"GREATER_EQUAL": 5,
	"LESS_EQUAL":    6,
	"STARTS_WITH":   7,
	"ENDS_WITH":     8,
	"NOT_EQUAL":     9,
}

func (x ComparisonOperator) String() string {
	return proto.EnumName(ComparisonOperator_name, int32(x))
}

func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{0}
}

// FlowInfo stores the info for the flow
type FlowInfo struct {
	ID                   uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                string                  `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Label                string                  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	FeeAddress           string                  `protobuf:"bytes,4,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
	Msgs                 []*types.Any            `protobuf:"bytes,5,rep,name=msgs,proto3" json:"msgs,omitempty"`
	Interval             time.Duration           `protobuf:"bytes,6,opt,name=interval,proto3,stdduration" json:"interval,omitempty"`
	StartTime            time.Time               `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	ExecTime             time.Time               `protobuf:"bytes,8,opt,name=exec_time,json=execTime,proto3,stdtime" json:"exec_time"`
	EndTime              time.Time               `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	UpdateHistory        []time.Time             `protobuf:"bytes,10,rep,name=update_history,json=updateHistory,proto3,stdtime" json:"update_history"`
	SelfHostedICAConfig  *ICAConfig              `protobuf:"bytes,11,opt,name=self_hosted_ica_config,json=selfHostedIcaConfig,proto3" json:"self_hosted_ica_config,omitempty"`
	TrustlessAgentConfig *TrustlessAgentConfig   `protobuf:"bytes,12,opt,name=trustless_agent_config,json=trustlessAgentConfig,proto3" json:"trustless_agent_config,omitempty"`
	Configuration        *ExecutionConfiguration `protobuf:"bytes,14,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Conditions           *ExecutionConditions    `protobuf:"bytes,15,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *FlowInfo) Reset()         { *m = FlowInfo{} }
func (m *FlowInfo) String() string { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()    {}
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{0}
}
func (m *FlowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowInfo.Merge(m, src)
}
func (m *FlowInfo) XXX_Size() int {
	return m.Size()
}
func (m *FlowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlowInfo proto.InternalMessageInfo

// base config for ICA
type ICAConfig struct {
	PortID       string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ConnectionID string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *ICAConfig) Reset()         { *m = ICAConfig{} }
func (m *ICAConfig) String() string { return proto.CompactTextString(m) }
func (*ICAConfig) ProtoMessage()    {}
func (*ICAConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{1}
}
func (m *ICAConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICAConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICAConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICAConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICAConfig.Merge(m, src)
}
func (m *ICAConfig) XXX_Size() int {
	return m.Size()
}
func (m *ICAConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ICAConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ICAConfig proto.InternalMessageInfo

// config for trustless agent
type TrustlessAgentConfig struct {
	AgentAddress string        `protobuf:"bytes,1,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	FeeLimit     []types1.Coin `protobuf:"bytes,3,rep,name=fee_limit,json=feeLimit,proto3" json:"fee_limit"`
}

func (m *TrustlessAgentConfig) Reset()         { *m = TrustlessAgentConfig{} }
func (m *TrustlessAgentConfig) String() string { return proto.CompactTextString(m) }
func (*TrustlessAgentConfig) ProtoMessage()    {}
func (*TrustlessAgentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{2}
}
func (m *TrustlessAgentConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustlessAgentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustlessAgentConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustlessAgentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustlessAgentConfig.Merge(m, src)
}
func (m *TrustlessAgentConfig) XXX_Size() int {
	return m.Size()
}
func (m *TrustlessAgentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustlessAgentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TrustlessAgentConfig proto.InternalMessageInfo

// ExecutionConfiguration provides the execution-related configuration of the
// flow
type ExecutionConfiguration struct {
	// if true, the flow response outputs are saved and can be used in logic
	SaveResponses bool `protobuf:"varint,1,opt,name=save_responses,json=saveResponses,proto3" json:"save_responses,omitempty"`
	// if true, the flow is not updatable
	UpdatingDisabled bool `protobuf:"varint,2,opt,name=updating_disabled,json=updatingDisabled,proto3" json:"updating_disabled,omitempty"`
	// If true, will execute until we get a successful Flow, if false/unset will
	// always execute
	StopOnSuccess bool `protobuf:"varint,3,opt,name=stop_on_success,json=stopOnSuccess,proto3" json:"stop_on_success,omitempty"`
	// If true, will execute until successful Flow, if false/unset will always
	// execute
	StopOnFailure bool `protobuf:"varint,4,opt,name=stop_on_failure,json=stopOnFailure,proto3" json:"stop_on_failure,omitempty"`
	// If true, will stop if message times oiut
	StopOnTimeout bool `protobuf:"varint,5,opt,name=stop_on_timeout,json=stopOnTimeout,proto3" json:"stop_on_timeout,omitempty"`
	// If true, owner account balance is used when trigger account funds run out
	FallbackToOwnerBalance bool `protobuf:"varint,6,opt,name=fallback_to_owner_balance,json=fallbackToOwnerBalance,proto3" json:"fallback_to_owner_balance,omitempty"`
}

func (m *ExecutionConfiguration) Reset()         { *m = ExecutionConfiguration{} }
func (m *ExecutionConfiguration) String() string { return proto.CompactTextString(m) }
func (*ExecutionConfiguration) ProtoMessage()    {}
func (*ExecutionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{3}
}
func (m *ExecutionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionConfiguration.Merge(m, src)
}
func (m *ExecutionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionConfiguration proto.InternalMessageInfo

// FlowHistory execution history
type FlowHistory struct {
	History []FlowHistoryEntry `protobuf:"bytes,1,rep,name=history,proto3" json:"history"`
}

func (m *FlowHistory) Reset()         { *m = FlowHistory{} }
func (m *FlowHistory) String() string { return proto.CompactTextString(m) }
func (*FlowHistory) ProtoMessage()    {}
func (*FlowHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{4}
}
func (m *FlowHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowHistory.Merge(m, src)
}
func (m *FlowHistory) XXX_Size() int {
	return m.Size()
}
func (m *FlowHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowHistory.DiscardUnknown(m)
}

var xxx_messageInfo_FlowHistory proto.InternalMessageInfo

// FlowHistoryEntry provides a the history of flow interchain tx call
type FlowHistoryEntry struct {
	ScheduledExecTime time.Time     `protobuf:"bytes,1,opt,name=scheduled_exec_time,json=scheduledExecTime,proto3,stdtime" json:"scheduled_exec_time"`
	ActualExecTime    time.Time     `protobuf:"bytes,2,opt,name=actual_exec_time,json=actualExecTime,proto3,stdtime" json:"actual_exec_time"`
	ExecFee           []types1.Coin `protobuf:"bytes,3,rep,name=exec_fee,json=execFee,proto3" json:"exec_fee"`
	// whether all messages are executed, independent of succesfull result
	Executed bool `protobuf:"varint,4,opt,name=executed,proto3" json:"executed,omitempty"`
	// timed out from execution over IBC
	TimedOut bool `protobuf:"varint,5,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	// errors from execution, if executed and no error the execution was
	// succesfull
	Errors []string `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	// will be empty when save_responses is false
	MsgResponses []*types.Any `protobuf:"bytes,7,rep,name=msg_responses,json=msgResponses,proto3" json:"msg_responses,omitempty"`
	// will be empty when save_responses is false
	QueryResponses []string `protobuf:"bytes,8,rep,name=query_responses,json=queryResponses,proto3" json:"query_responses,omitempty"`
	// packet sequence of the flow execution on the host chain
	PacketSequence uint64 `protobuf:"varint,9,opt,name=packet_sequence,json=packetSequence,proto3" json:"packet_sequence,omitempty"`
}

func (m *FlowHistoryEntry) Reset()         { *m = FlowHistoryEntry{} }
func (m *FlowHistoryEntry) String() string { return proto.CompactTextString(m) }
func (*FlowHistoryEntry) ProtoMessage()    {}
func (*FlowHistoryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{5}
}
func (m *FlowHistoryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowHistoryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowHistoryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowHistoryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowHistoryEntry.Merge(m, src)
}
func (m *FlowHistoryEntry) XXX_Size() int {
	return m.Size()
}
func (m *FlowHistoryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowHistoryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FlowHistoryEntry proto.InternalMessageInfo

// ExecutionConditions provides execution conditions for the flow
type ExecutionConditions struct {
	// Replace value with value from message or response from another flow’s
	// latest output
	FeedbackLoops []*FeedbackLoop `protobuf:"bytes,2,rep,name=feedback_loops,json=feedbackLoops,proto3" json:"feedback_loops,omitempty"`
	// Comparison with response response value
	Comparisons []*Comparison `protobuf:"bytes,1,rep,name=comparisons,proto3" json:"comparisons,omitempty"`
	// optional array of dependent intents that when executing succesfully, stops
	// execution
	StopOnSuccessOf []uint64 `protobuf:"varint,5,rep,packed,name=stop_on_success_of,json=stopOnSuccessOf,proto3" json:"stop_on_success_of,omitempty"`
	// optional array of dependent intents that when not executing succesfully,
	// stops execution
	StopOnFailureOf []uint64 `protobuf:"varint,6,rep,packed,name=stop_on_failure_of,json=stopOnFailureOf,proto3" json:"stop_on_failure_of,omitempty"`
	// optional array of dependent intents that should be executed succesfully
	// after their latest call before execution is allowed
	SkipOnFailureOf []uint64 `protobuf:"varint,7,rep,packed,name=skip_on_failure_of,json=skipOnFailureOf,proto3" json:"skip_on_failure_of,omitempty"`
	// optional array of dependent intents that should fail after their latest
	// call before execution is allowed
	SkipOnSuccessOf      []uint64 `protobuf:"varint,8,rep,packed,name=skip_on_success_of,json=skipOnSuccessOf,proto3" json:"skip_on_success_of,omitempty"`
	UseAndForComparisons bool     `protobuf:"varint,9,opt,name=use_and_for_comparisons,json=useAndForComparisons,proto3" json:"use_and_for_comparisons,omitempty"`
}

func (m *ExecutionConditions) Reset()         { *m = ExecutionConditions{} }
func (m *ExecutionConditions) String() string { return proto.CompactTextString(m) }
func (*ExecutionConditions) ProtoMessage()    {}
func (*ExecutionConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{6}
}
func (m *ExecutionConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionConditions.Merge(m, src)
}
func (m *ExecutionConditions) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionConditions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionConditions proto.InternalMessageInfo

// Replace value with value from message or response from another flow’s
// latest output before execution
type FeedbackLoop struct {
	FlowID        uint64 `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	ResponseIndex uint32 `protobuf:"varint,3,opt,name=response_index,json=responseIndex,proto3" json:"response_index,omitempty"`
	ResponseKey   string `protobuf:"bytes,2,opt,name=response_key,json=responseKey,proto3" json:"response_key,omitempty"`
	MsgsIndex     uint32 `protobuf:"varint,4,opt,name=msgs_index,json=msgsIndex,proto3" json:"msgs_index,omitempty"`
	MsgKey        string `protobuf:"bytes,5,opt,name=msg_key,json=msgKey,proto3" json:"msg_key,omitempty"`
	ValueType     string `protobuf:"bytes,6,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	//bool calculate_difference = 7; //True: calculate the difference with the previous value instead of using the value directly.
	ICQConfig *ICQConfig `protobuf:"bytes,8,opt,name=icq_config,json=icqConfig,proto3" json:"icq_config,omitempty"`
}

func (m *FeedbackLoop) Reset()         { *m = FeedbackLoop{} }
func (m *FeedbackLoop) String() string { return proto.CompactTextString(m) }
func (*FeedbackLoop) ProtoMessage()    {}
func (*FeedbackLoop) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{7}
}
func (m *FeedbackLoop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedbackLoop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedbackLoop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedbackLoop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackLoop.Merge(m, src)
}
func (m *FeedbackLoop) XXX_Size() int {
	return m.Size()
}
func (m *FeedbackLoop) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackLoop.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackLoop proto.InternalMessageInfo

// Comparison is checked on the response in JSON before execution of
// flow and outputs true or false
type Comparison struct {
	FlowID        uint64             `protobuf:"varint,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	ResponseIndex uint32             `protobuf:"varint,2,opt,name=response_index,json=responseIndex,proto3" json:"response_index,omitempty"`
	ResponseKey   string             `protobuf:"bytes,3,opt,name=response_key,json=responseKey,proto3" json:"response_key,omitempty"`
	ValueType     string             `protobuf:"bytes,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	Operator      ComparisonOperator `protobuf:"varint,5,opt,name=operator,proto3,enum=intento.intent.v1.ComparisonOperator" json:"operator,omitempty"`
	Operand       string             `protobuf:"bytes,6,opt,name=operand,proto3" json:"operand,omitempty"`
	//bool calculate_difference = 7; //True: Calculate the difference with the previous value.
	ICQConfig *ICQConfig `protobuf:"bytes,8,opt,name=icq_config,json=icqConfig,proto3" json:"icq_config,omitempty"`
}

func (m *Comparison) Reset()         { *m = Comparison{} }
func (m *Comparison) String() string { return proto.CompactTextString(m) }
func (*Comparison) ProtoMessage()    {}
func (*Comparison) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{8}
}
func (m *Comparison) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comparison) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comparison.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comparison) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comparison.Merge(m, src)
}
func (m *Comparison) XXX_Size() int {
	return m.Size()
}
func (m *Comparison) XXX_DiscardUnknown() {
	xxx_messageInfo_Comparison.DiscardUnknown(m)
}

var xxx_messageInfo_Comparison proto.InternalMessageInfo

// config for using interchain queries
type ICQConfig struct {
	ConnectionId    string               `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChainId         string               `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TimeoutPolicy   types2.TimeoutPolicy `protobuf:"varint,3,opt,name=timeout_policy,json=timeoutPolicy,proto3,enum=stride.interchainquery.v1.TimeoutPolicy" json:"timeout_policy,omitempty"`
	TimeoutDuration time.Duration        `protobuf:"bytes,4,opt,name=timeout_duration,json=timeoutDuration,proto3,stdduration" json:"timeout_duration"`
	QueryType       string               `protobuf:"bytes,5,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	QueryKey        string               `protobuf:"bytes,6,opt,name=query_key,json=queryKey,proto3" json:"query_key,omitempty"`
	Response        []byte               `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *ICQConfig) Reset()         { *m = ICQConfig{} }
func (m *ICQConfig) String() string { return proto.CompactTextString(m) }
func (*ICQConfig) ProtoMessage()    {}
func (*ICQConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4804c0a9beba996a, []int{9}
}
func (m *ICQConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICQConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICQConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICQConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICQConfig.Merge(m, src)
}
func (m *ICQConfig) XXX_Size() int {
	return m.Size()
}
func (m *ICQConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ICQConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ICQConfig proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("intento.intent.v1.ComparisonOperator", ComparisonOperator_name, ComparisonOperator_value)
	proto.RegisterType((*FlowInfo)(nil), "intento.intent.v1.FlowInfo")
	proto.RegisterType((*ICAConfig)(nil), "intento.intent.v1.ICAConfig")
	proto.RegisterType((*TrustlessAgentConfig)(nil), "intento.intent.v1.TrustlessAgentConfig")
	proto.RegisterType((*ExecutionConfiguration)(nil), "intento.intent.v1.ExecutionConfiguration")
	proto.RegisterType((*FlowHistory)(nil), "intento.intent.v1.FlowHistory")
	proto.RegisterType((*FlowHistoryEntry)(nil), "intento.intent.v1.FlowHistoryEntry")
	proto.RegisterType((*ExecutionConditions)(nil), "intento.intent.v1.ExecutionConditions")
	proto.RegisterType((*FeedbackLoop)(nil), "intento.intent.v1.FeedbackLoop")
	proto.RegisterType((*Comparison)(nil), "intento.intent.v1.Comparison")
	proto.RegisterType((*ICQConfig)(nil), "intento.intent.v1.ICQConfig")
}

func init() { proto.RegisterFile("intento/intent/v1/flow.proto", fileDescriptor_4804c0a9beba996a) }

var fileDescriptor_4804c0a9beba996a = []byte{
	// 1657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x72, 0x1b, 0xc7,
	0x11, 0x26, 0x7e, 0x08, 0xec, 0x36, 0x7e, 0x08, 0x8d, 0x58, 0x14, 0x48, 0xdb, 0x00, 0x03, 0x95,
	0x2d, 0xc6, 0x4e, 0x80, 0x92, 0x52, 0x3a, 0x38, 0x95, 0x2a, 0x17, 0x00, 0x82, 0x16, 0x62, 0x9a,
	0xb0, 0x07, 0x70, 0xa5, 0x2a, 0x97, 0xad, 0xc5, 0xee, 0x2c, 0xb8, 0xe1, 0x62, 0x07, 0xda, 0x99,
	0xa5, 0x84, 0x47, 0xc8, 0xcd, 0xb9, 0xe5, 0x96, 0x1c, 0xf3, 0x00, 0x7e, 0x83, 0xe4, 0xa0, 0xca,
	0xc9, 0x95, 0x53, 0x4e, 0x4c, 0x02, 0xdd, 0xf2, 0x14, 0xa9, 0xf9, 0x59, 0x60, 0x45, 0xc1, 0x8a,
	0x94, 0xca, 0x09, 0xe8, 0xaf, 0xbf, 0xaf, 0x67, 0xa7, 0xa7, 0xa7, 0x67, 0x06, 0xde, 0xf7, 0x43,
	0x4e, 0x42, 0x4e, 0x3b, 0xea, 0xb7, 0x73, 0xfd, 0xb0, 0xe3, 0x05, 0xf4, 0x59, 0x7b, 0x11, 0x51,
	0x4e, 0xd1, 0x1d, 0xed, 0x6d, 0xab, 0xdf, 0xf6, 0xf5, 0xc3, 0xa3, 0x86, 0x43, 0xd9, 0x9c, 0xb2,
	0xce, 0xd4, 0x66, 0xa4, 0x73, 0xfd, 0x70, 0x4a, 0xb8, 0xfd, 0xb0, 0xe3, 0x50, 0x3f, 0x54, 0x92,
	0xa3, 0x43, 0xe5, 0xb7, 0xa4, 0xd5, 0x51, 0x86, 0x76, 0xed, 0xcf, 0xe8, 0x8c, 0x2a, 0x5c, 0xfc,
	0x4b, 0x04, 0x33, 0x4a, 0x67, 0x01, 0xe9, 0x48, 0x6b, 0x1a, 0x7b, 0x1d, 0x3b, 0x5c, 0x6a, 0x57,
	0xe3, 0xb6, 0xcb, 0x8d, 0x23, 0x9b, 0xfb, 0x34, 0x19, 0xab, 0x79, 0xdb, 0xcf, 0xfd, 0x39, 0x61,
	0xdc, 0x9e, 0x2f, 0x34, 0xe1, 0x01, 0xe3, 0x91, 0xef, 0x12, 0x39, 0xb9, 0xc8, 0xb9, 0xb4, 0xfd,
	0xf0, 0x69, 0x4c, 0xa2, 0xa5, 0x98, 0xe5, 0x8c, 0x84, 0x84, 0xf9, 0xfa, 0xd3, 0x5a, 0xbf, 0x2b,
	0x82, 0x71, 0x16, 0xd0, 0x67, 0xc3, 0xd0, 0xa3, 0xe8, 0x00, 0xb2, 0xbe, 0x5b, 0xcf, 0x1c, 0x67,
	0x4e, 0xf2, 0xbd, 0xc2, 0xea, 0xa6, 0x99, 0x1d, 0x9e, 0xe2, 0xac, 0xef, 0xa2, 0x7d, 0xd8, 0xa5,
	0xcf, 0x42, 0x12, 0xd5, 0xb3, 0xc7, 0x99, 0x13, 0x13, 0x2b, 0x43, 0xa0, 0x81, 0x3d, 0x25, 0x41,
	0x3d, 0xa7, 0x50, 0x69, 0xa0, 0x26, 0x94, 0x3c, 0x42, 0x2c, 0xdb, 0x75, 0x23, 0xc2, 0x58, 0x3d,
	0x2f, 0x7d, 0xe0, 0x11, 0xd2, 0x55, 0x08, 0x7a, 0x0c, 0xf9, 0x39, 0x9b, 0xb1, 0xfa, 0xee, 0x71,
	0xee, 0xa4, 0xf4, 0x68, 0xbf, 0xad, 0xa6, 0xd2, 0x4e, 0xa6, 0xd2, 0xee, 0x86, 0xcb, 0x5e, 0xe9,
	0xaf, 0xdf, 0xfd, 0xb4, 0xc8, 0xdc, 0xab, 0xf6, 0x97, 0x6c, 0x86, 0x25, 0x1d, 0x7d, 0x03, 0x86,
	0x9c, 0xcc, 0xb5, 0x1d, 0xd4, 0x0b, 0xc7, 0x99, 0x93, 0xd2, 0xa3, 0xc3, 0xd7, 0xa4, 0xa7, 0x3a,
	0x4b, 0xbd, 0xc6, 0x8b, 0x9b, 0xe6, 0xce, 0xbf, 0x6f, 0x9a, 0x28, 0x91, 0xfc, 0x84, 0xce, 0x7d,
	0x4e, 0xe6, 0x0b, 0xbe, 0xfc, 0xfd, 0x3f, 0x9a, 0x19, 0xbc, 0x0e, 0x85, 0xfa, 0x00, 0x8c, 0xdb,
	0x11, 0xb7, 0x44, 0x06, 0xeb, 0x45, 0x19, 0xf8, 0xe8, 0xb5, 0xc0, 0x93, 0x24, 0xbd, 0x3d, 0x43,
	0x44, 0xfe, 0x56, 0xc4, 0x30, 0xa5, 0x4e, 0x78, 0x50, 0x17, 0x4c, 0xf2, 0x9c, 0x38, 0x2a, 0x86,
	0xf1, 0x0e, 0x31, 0x0c, 0x21, 0x93, 0x21, 0x3e, 0x03, 0x83, 0x84, 0xae, 0x8a, 0x60, 0xbe, 0x43,
	0x84, 0x22, 0x09, 0x5d, 0x19, 0xe0, 0x0b, 0xa8, 0xc6, 0x0b, 0xd7, 0xe6, 0xc4, 0xba, 0xf4, 0x19,
	0xa7, 0xd1, 0xb2, 0x0e, 0x32, 0xc1, 0x6f, 0x17, 0xa6, 0xa2, 0xb4, 0x4f, 0x94, 0x14, 0xfd, 0x06,
	0x0e, 0x18, 0x09, 0x3c, 0xeb, 0x92, 0x32, 0x4e, 0x5c, 0xcb, 0x77, 0x6c, 0xcb, 0xa1, 0xa1, 0xe7,
	0xcf, 0xea, 0x25, 0xf9, 0x6d, 0xef, 0xb7, 0x5f, 0xdb, 0x1f, 0xed, 0x61, 0xbf, 0xdb, 0x97, 0x9c,
	0xde, 0xbd, 0xd5, 0x4d, 0xf3, 0xee, 0x98, 0x04, 0xde, 0x13, 0x29, 0x5f, 0x3b, 0xf0, 0x5d, 0xb6,
	0x01, 0x1d, 0x5b, 0x81, 0xe8, 0x19, 0x1c, 0xf0, 0x28, 0x66, 0x3c, 0x20, 0x8c, 0x59, 0xf6, 0x8c,
	0x84, 0x3c, 0x19, 0xab, 0x2c, 0xc7, 0x7a, 0xb0, 0x65, 0xac, 0x49, 0x22, 0xe8, 0x0a, 0xbe, 0x1e,
	0xb6, 0xbe, 0xba, 0x69, 0xee, 0x6f, 0xf3, 0xe0, 0x7d, 0xbe, 0x05, 0x45, 0x23, 0xa8, 0xa8, 0x81,
	0x74, 0xd5, 0xd4, 0xab, 0x72, 0xbc, 0x1f, 0x6f, 0x19, 0x6f, 0xf0, 0x9c, 0x38, 0xb1, 0xe0, 0xf4,
	0xd3, 0x02, 0xfc, 0xaa, 0x1e, 0x9d, 0x01, 0x38, 0x34, 0x74, 0x7d, 0x61, 0xb0, 0xfa, 0x9e, 0x8c,
	0xf6, 0xd1, 0x7f, 0x89, 0xa6, 0xd9, 0x38, 0xa5, 0x6c, 0xcd, 0xc0, 0x5c, 0xe7, 0x0c, 0xdd, 0x87,
	0xe2, 0x82, 0x46, 0xdc, 0xd2, 0x1b, 0xd3, 0xec, 0xc1, 0xea, 0xa6, 0x59, 0xf8, 0x8a, 0x46, 0x7c,
	0x78, 0x8a, 0x0b, 0xc2, 0x35, 0x74, 0xd1, 0x63, 0x39, 0x95, 0x90, 0x38, 0x22, 0x80, 0xa0, 0xca,
	0x8d, 0xda, 0xab, 0xad, 0x6e, 0x9a, 0xe5, 0xfe, 0xda, 0x31, 0x3c, 0xc5, 0xe5, 0x0d, 0x6d, 0xe8,
	0xb6, 0x96, 0xb0, 0x35, 0x5f, 0xe8, 0x3e, 0x54, 0xd4, 0x42, 0x24, 0xbb, 0x58, 0x8e, 0x8c, 0xcb,
	0x12, 0x4c, 0xf6, 0xf1, 0x2f, 0xc0, 0x14, 0x1b, 0x3d, 0xf0, 0xe7, 0x3e, 0xaf, 0xe7, 0x64, 0xad,
	0x1d, 0xb6, 0x75, 0xdb, 0x13, 0x3d, 0xb2, 0xad, 0x7b, 0x64, 0xbb, 0x4f, 0xfd, 0xb0, 0x97, 0x17,
	0xa5, 0x86, 0x0d, 0x8f, 0x90, 0x73, 0x21, 0x68, 0xfd, 0x21, 0x0b, 0x07, 0xdb, 0xb3, 0x8a, 0x3e,
	0x84, 0x2a, 0xb3, 0xaf, 0x89, 0x15, 0x11, 0xb6, 0xa0, 0x21, 0x23, 0x6a, 0x78, 0x03, 0x57, 0x04,
	0x8a, 0x13, 0x10, 0x7d, 0x02, 0x77, 0x64, 0xd1, 0xfa, 0xe1, 0xcc, 0x72, 0x7d, 0x66, 0x4f, 0x03,
	0xa2, 0xe6, 0x6d, 0xe0, 0x5a, 0xe2, 0x38, 0xd5, 0x38, 0xfa, 0x08, 0xf6, 0x18, 0xa7, 0x0b, 0x8b,
	0x86, 0x16, 0x8b, 0x1d, 0x47, 0xcc, 0x29, 0xa7, 0x83, 0x72, 0xba, 0x18, 0x85, 0x63, 0x05, 0xa6,
	0x79, 0x9e, 0xed, 0x07, 0x71, 0x44, 0x64, 0x07, 0x5b, 0xf3, 0xce, 0x14, 0x98, 0xe6, 0x89, 0x2d,
	0x4b, 0x63, 0x5e, 0xdf, 0x4d, 0xf3, 0x26, 0x0a, 0x44, 0x9f, 0xc2, 0xa1, 0x67, 0x07, 0xc1, 0xd4,
	0x76, 0xae, 0x2c, 0x4e, 0x2d, 0xd9, 0x38, 0xad, 0xa9, 0x1d, 0xd8, 0xa1, 0x43, 0x64, 0x1b, 0x33,
	0xf0, 0x41, 0x42, 0x98, 0xd0, 0x91, 0x70, 0xf7, 0x94, 0xb7, 0x85, 0xa1, 0x24, 0x1a, 0x73, 0xb2,
	0x25, 0xfb, 0x50, 0x4c, 0x36, 0x76, 0x46, 0x26, 0xfb, 0xfe, 0x96, 0xca, 0x4a, 0x09, 0x06, 0x21,
	0x8f, 0x96, 0x3a, 0xed, 0x89, 0xb2, 0xf5, 0xb7, 0x1c, 0xd4, 0x6e, 0x73, 0xd0, 0x04, 0xee, 0x32,
	0xe7, 0x92, 0xb8, 0x71, 0x40, 0x5c, 0x6b, 0xd3, 0xc7, 0x32, 0xef, 0xd0, 0x85, 0xee, 0xac, 0x03,
	0x0c, 0x92, 0x86, 0x76, 0x01, 0x35, 0xdb, 0xe1, 0xb1, 0x1d, 0xa4, 0x42, 0x66, 0xdf, 0x21, 0x64,
	0x55, 0xa9, 0xd7, 0xf1, 0x7e, 0x0e, 0xb2, 0x59, 0x5a, 0x1e, 0x21, 0x6f, 0x5b, 0x6d, 0x45, 0x21,
	0x38, 0x23, 0x04, 0x1d, 0x29, 0x6d, 0xcc, 0x89, 0xab, 0x97, 0x73, 0x6d, 0xa3, 0xf7, 0xc0, 0x14,
	0xdf, 0xe6, 0x5a, 0x9b, 0x35, 0x34, 0x24, 0x30, 0x8a, 0x39, 0x3a, 0x80, 0x02, 0x89, 0x22, 0x1a,
	0xb1, 0x7a, 0xe1, 0x38, 0x77, 0x62, 0x62, 0x6d, 0xa1, 0x4f, 0xa1, 0x32, 0x67, 0xb3, 0x54, 0x85,
	0x16, 0x7f, 0xf8, 0x30, 0xc3, 0xe5, 0x39, 0x9b, 0x6d, 0xca, 0xf6, 0x01, 0xec, 0xc9, 0xa3, 0x38,
	0x25, 0x36, 0x64, 0xec, 0xaa, 0x84, 0x5f, 0x21, 0x2e, 0x6c, 0xe7, 0x8a, 0x70, 0x8b, 0x91, 0xa7,
	0x31, 0x11, 0x05, 0x23, 0x0e, 0x86, 0x3c, 0xae, 0x2a, 0x78, 0xac, 0xd1, 0xd6, 0x6f, 0x73, 0x70,
	0x77, 0x4b, 0x4b, 0x41, 0x67, 0x50, 0xf5, 0x08, 0x71, 0x65, 0xed, 0x05, 0x94, 0x2e, 0x58, 0x3d,
	0x2b, 0xbf, 0xb2, 0xb9, 0xad, 0x70, 0x34, 0xf1, 0x9c, 0xd2, 0x05, 0xae, 0x78, 0x29, 0x8b, 0xa1,
	0xcf, 0xa0, 0xe4, 0xd0, 0xf9, 0xc2, 0x8e, 0x7c, 0x26, 0xfa, 0x9a, 0xaa, 0xbe, 0x0f, 0xb6, 0x04,
	0xe9, 0xaf, 0x59, 0x38, 0xad, 0x40, 0x9f, 0x00, 0xba, 0xb5, 0xf9, 0x2c, 0xea, 0xc9, 0xf3, 0x3f,
	0x8f, 0xf7, 0x5e, 0xd9, 0x7f, 0x23, 0x2f, 0x4d, 0xd6, 0x3b, 0x50, 0x90, 0x0b, 0x69, 0xb2, 0xde,
	0x84, 0x9a, 0x7c, 0xe5, 0xdf, 0x26, 0x17, 0x35, 0xf9, 0xca, 0xff, 0x21, 0x72, 0xea, 0x33, 0x8c,
	0x34, 0x79, 0xf3, 0x19, 0x8f, 0xe1, 0x5e, 0xcc, 0x88, 0x65, 0x87, 0xae, 0xe5, 0xd1, 0xc8, 0x4a,
	0x27, 0xc0, 0x94, 0x45, 0xb2, 0x1f, 0x33, 0xd2, 0x0d, 0xdd, 0x33, 0x1a, 0x6d, 0xa6, 0xcd, 0x5a,
	0x7f, 0xcc, 0x42, 0x39, 0x9d, 0x4b, 0xd1, 0xbe, 0xc5, 0xb5, 0xd2, 0x5a, 0xdf, 0xab, 0x64, 0xfb,
	0x96, 0x37, 0xae, 0x53, 0x5c, 0x10, 0xae, 0xa1, 0x2b, 0x3a, 0x5e, 0x52, 0x0d, 0x96, 0x1f, 0xba,
	0xe4, 0xb9, 0x6c, 0x4e, 0x15, 0x5c, 0x49, 0xd0, 0xa1, 0x00, 0xd1, 0x8f, 0xa0, 0xbc, 0xa6, 0x5d,
	0x91, 0xa5, 0xbe, 0x8d, 0x95, 0x12, 0xec, 0x0b, 0xb2, 0x44, 0x1f, 0x00, 0x88, 0xdb, 0x92, 0x8e,
	0x92, 0x97, 0x51, 0x4c, 0x81, 0xa8, 0x08, 0xf7, 0xa0, 0x28, 0xea, 0x56, 0x88, 0x77, 0xa5, 0xb8,
	0x30, 0x67, 0x33, 0xad, 0xbb, 0xb6, 0x83, 0x98, 0x58, 0x7c, 0xb9, 0x50, 0x8d, 0xc9, 0xc4, 0xa6,
	0x44, 0x26, 0xcb, 0x05, 0x41, 0xbf, 0x04, 0xf0, 0x9d, 0xa7, 0xc9, 0xb9, 0x6c, 0xbc, 0xe1, 0x0e,
	0xf0, 0xb5, 0x3e, 0x8c, 0x2b, 0xab, 0x9b, 0xa6, 0xb9, 0x36, 0xb1, 0xe9, 0x3b, 0x4f, 0xd5, 0xdf,
	0xd6, 0x9f, 0xb3, 0x00, 0x9b, 0x94, 0xfd, 0xaf, 0x09, 0xca, 0xbe, 0x4d, 0x82, 0x72, 0x5b, 0x13,
	0x94, 0x9a, 0x68, 0xfe, 0xf6, 0x44, 0xbb, 0x60, 0xd0, 0x05, 0x89, 0x6c, 0x4e, 0x23, 0x99, 0xa1,
	0xea, 0xa3, 0x0f, 0xdf, 0x58, 0xe8, 0x23, 0x4d, 0xc6, 0x6b, 0x19, 0xaa, 0x43, 0x51, 0xfe, 0x0f,
	0x5d, 0x9d, 0xc7, 0xc4, 0xfc, 0xbf, 0x66, 0xf1, 0x2f, 0x59, 0xd8, 0x38, 0xc4, 0x81, 0xfd, 0xea,
	0xf9, 0xaf, 0x0f, 0xec, 0xf4, 0x69, 0x8f, 0x0e, 0xc1, 0x90, 0x2f, 0x81, 0xf5, 0xfd, 0x00, 0x17,
	0xa5, 0x3d, 0x74, 0xd1, 0x08, 0xaa, 0xfa, 0x18, 0xb3, 0x16, 0x34, 0xf0, 0x1d, 0x95, 0xba, 0xea,
	0xa3, 0x93, 0xb6, 0x7a, 0x47, 0xb4, 0x6f, 0xbd, 0x23, 0xe4, 0x1d, 0x4c, 0x09, 0xbe, 0x92, 0x7c,
	0x5c, 0xe1, 0x69, 0x53, 0x74, 0xff, 0x24, 0x60, 0xf2, 0x74, 0x91, 0xc9, 0x7e, 0xe3, 0xad, 0x5d,
	0x36, 0x7f, 0x79, 0x3f, 0xdf, 0xd3, 0xe2, 0xc4, 0x25, 0x96, 0x4d, 0x75, 0x4d, 0xb9, 0x6c, 0xaa,
	0x76, 0x4d, 0x89, 0xc8, 0x65, 0x7b, 0x0f, 0x94, 0x21, 0x57, 0x5d, 0x65, 0xdd, 0x90, 0x80, 0x58,
	0xf2, 0x23, 0x30, 0x92, 0x0a, 0x90, 0x17, 0xfc, 0x32, 0x5e, 0xdb, 0x1f, 0x7f, 0x97, 0x01, 0xf4,
	0xfa, 0x6a, 0x22, 0x13, 0x76, 0x07, 0x5f, 0x7f, 0xd3, 0x3d, 0xaf, 0xed, 0xa0, 0x32, 0x18, 0xfd,
	0xd1, 0xc5, 0xa4, 0x3b, 0xbc, 0x18, 0xd7, 0x32, 0xa8, 0x06, 0xe5, 0x8b, 0xd1, 0xc4, 0x5a, 0x23,
	0x59, 0x81, 0x8c, 0xbf, 0xec, 0x9e, 0x9f, 0x0f, 0xb0, 0x35, 0x79, 0xd2, 0xbd, 0xa8, 0xe5, 0xd0,
	0x1e, 0x94, 0xce, 0xbb, 0xf8, 0xf3, 0x04, 0xc8, 0xa3, 0x3b, 0x50, 0xf9, 0x1c, 0x0f, 0xba, 0x93,
	0x01, 0xb6, 0x54, 0xd4, 0x5d, 0x54, 0x05, 0x38, 0x1f, 0x8c, 0xc7, 0xda, 0x2e, 0x08, 0xcd, 0x78,
	0xd2, 0xc5, 0x93, 0xb1, 0xf5, 0xab, 0xe1, 0xe4, 0x49, 0xad, 0x88, 0x2a, 0x60, 0x0e, 0x2e, 0x4e,
	0xb5, 0x69, 0x08, 0x53, 0x8c, 0xab, 0xe8, 0x66, 0xef, 0xfc, 0xc5, 0xbf, 0x1a, 0x3b, 0x7f, 0x5a,
	0x35, 0x32, 0x2f, 0x56, 0x8d, 0xcc, 0xf7, 0xab, 0x46, 0xe6, 0x9f, 0xab, 0x46, 0xe6, 0xdb, 0x97,
	0x8d, 0x9d, 0xef, 0x5f, 0x36, 0x76, 0xfe, 0xfe, 0xb2, 0xb1, 0xf3, 0xeb, 0x8f, 0x67, 0x3e, 0xbf,
	0x8c, 0xa7, 0x6d, 0x87, 0xce, 0x3b, 0x3c, 0x62, 0x3c, 0xb0, 0xa7, 0xac, 0x93, 0x3c, 0x79, 0x9f,
	0x27, 0x8f, 0x5e, 0x91, 0x4d, 0x36, 0x2d, 0xc8, 0xa5, 0xf8, 0xd9, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0xc0, 0xd3, 0x4d, 0x13, 0x0f, 0x00, 0x00,
}

func (this *FlowInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowInfo)
	if !ok {
		that2, ok := that.(FlowInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.FeeAddress != that1.FeeAddress {
		return false
	}
	if len(this.Msgs) != len(that1.Msgs) {
		return false
	}
	for i := range this.Msgs {
		if !this.Msgs[i].Equal(that1.Msgs[i]) {
			return false
		}
	}
	if this.Interval != that1.Interval {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.ExecTime.Equal(that1.ExecTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if len(this.UpdateHistory) != len(that1.UpdateHistory) {
		return false
	}
	for i := range this.UpdateHistory {
		if !this.UpdateHistory[i].Equal(that1.UpdateHistory[i]) {
			return false
		}
	}
	if !this.SelfHostedICAConfig.Equal(that1.SelfHostedICAConfig) {
		return false
	}
	if !this.TrustlessAgentConfig.Equal(that1.TrustlessAgentConfig) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.Conditions.Equal(that1.Conditions) {
		return false
	}
	return true
}
func (this *ICAConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICAConfig)
	if !ok {
		that2, ok := that.(ICAConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortID != that1.PortID {
		return false
	}
	if this.ConnectionID != that1.ConnectionID {
		return false
	}
	return true
}
func (this *TrustlessAgentConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrustlessAgentConfig)
	if !ok {
		that2, ok := that.(TrustlessAgentConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AgentAddress != that1.AgentAddress {
		return false
	}
	if len(this.FeeLimit) != len(that1.FeeLimit) {
		return false
	}
	for i := range this.FeeLimit {
		if !this.FeeLimit[i].Equal(&that1.FeeLimit[i]) {
			return false
		}
	}
	return true
}
func (this *ExecutionConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionConfiguration)
	if !ok {
		that2, ok := that.(ExecutionConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SaveResponses != that1.SaveResponses {
		return false
	}
	if this.UpdatingDisabled != that1.UpdatingDisabled {
		return false
	}
	if this.StopOnSuccess != that1.StopOnSuccess {
		return false
	}
	if this.StopOnFailure != that1.StopOnFailure {
		return false
	}
	if this.StopOnTimeout != that1.StopOnTimeout {
		return false
	}
	if this.FallbackToOwnerBalance != that1.FallbackToOwnerBalance {
		return false
	}
	return true
}
func (this *FlowHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowHistory)
	if !ok {
		that2, ok := that.(FlowHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(&that1.History[i]) {
			return false
		}
	}
	return true
}
func (this *FlowHistoryEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowHistoryEntry)
	if !ok {
		that2, ok := that.(FlowHistoryEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScheduledExecTime.Equal(that1.ScheduledExecTime) {
		return false
	}
	if !this.ActualExecTime.Equal(that1.ActualExecTime) {
		return false
	}
	if len(this.ExecFee) != len(that1.ExecFee) {
		return false
	}
	for i := range this.ExecFee {
		if !this.ExecFee[i].Equal(&that1.ExecFee[i]) {
			return false
		}
	}
	if this.Executed != that1.Executed {
		return false
	}
	if this.TimedOut != that1.TimedOut {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	if len(this.MsgResponses) != len(that1.MsgResponses) {
		return false
	}
	for i := range this.MsgResponses {
		if !this.MsgResponses[i].Equal(that1.MsgResponses[i]) {
			return false
		}
	}
	if len(this.QueryResponses) != len(that1.QueryResponses) {
		return false
	}
	for i := range this.QueryResponses {
		if this.QueryResponses[i] != that1.QueryResponses[i] {
			return false
		}
	}
	if this.PacketSequence != that1.PacketSequence {
		return false
	}
	return true
}
func (this *ExecutionConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionConditions)
	if !ok {
		that2, ok := that.(ExecutionConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FeedbackLoops) != len(that1.FeedbackLoops) {
		return false
	}
	for i := range this.FeedbackLoops {
		if !this.FeedbackLoops[i].Equal(that1.FeedbackLoops[i]) {
			return false
		}
	}
	if len(this.Comparisons) != len(that1.Comparisons) {
		return false
	}
	for i := range this.Comparisons {
		if !this.Comparisons[i].Equal(that1.Comparisons[i]) {
			return false
		}
	}
	if len(this.StopOnSuccessOf) != len(that1.StopOnSuccessOf) {
		return false
	}
	for i := range this.StopOnSuccessOf {
		if this.StopOnSuccessOf[i] != that1.StopOnSuccessOf[i] {
			return false
		}
	}
	if len(this.StopOnFailureOf) != len(that1.StopOnFailureOf) {
		return false
	}
	for i := range this.StopOnFailureOf {
		if this.StopOnFailureOf[i] != that1.StopOnFailureOf[i] {
			return false
		}
	}
	if len(this.SkipOnFailureOf) != len(that1.SkipOnFailureOf) {
		return false
	}
	for i := range this.SkipOnFailureOf {
		if this.SkipOnFailureOf[i] != that1.SkipOnFailureOf[i] {
			return false
		}
	}
	if len(this.SkipOnSuccessOf) != len(that1.SkipOnSuccessOf) {
		return false
	}
	for i := range this.SkipOnSuccessOf {
		if this.SkipOnSuccessOf[i] != that1.SkipOnSuccessOf[i] {
			return false
		}
	}
	if this.UseAndForComparisons != that1.UseAndForComparisons {
		return false
	}
	return true
}
func (this *FeedbackLoop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedbackLoop)
	if !ok {
		that2, ok := that.(FeedbackLoop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FlowID != that1.FlowID {
		return false
	}
	if this.ResponseIndex != that1.ResponseIndex {
		return false
	}
	if this.ResponseKey != that1.ResponseKey {
		return false
	}
	if this.MsgsIndex != that1.MsgsIndex {
		return false
	}
	if this.MsgKey != that1.MsgKey {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if !this.ICQConfig.Equal(that1.ICQConfig) {
		return false
	}
	return true
}
func (this *Comparison) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Comparison)
	if !ok {
		that2, ok := that.(Comparison)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FlowID != that1.FlowID {
		return false
	}
	if this.ResponseIndex != that1.ResponseIndex {
		return false
	}
	if this.ResponseKey != that1.ResponseKey {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.Operand != that1.Operand {
		return false
	}
	if !this.ICQConfig.Equal(that1.ICQConfig) {
		return false
	}
	return true
}
func (this *ICQConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICQConfig)
	if !ok {
		that2, ok := that.(ICQConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.TimeoutPolicy != that1.TimeoutPolicy {
		return false
	}
	if this.TimeoutDuration != that1.TimeoutDuration {
		return false
	}
	if this.QueryType != that1.QueryType {
		return false
	}
	if this.QueryKey != that1.QueryKey {
		return false
	}
	if !bytes.Equal(this.Response, that1.Response) {
		return false
	}
	return true
}
func (m *FlowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conditions != nil {
		{
			size, err := m.Conditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.TrustlessAgentConfig != nil {
		{
			size, err := m.TrustlessAgentConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SelfHostedICAConfig != nil {
		{
			size, err := m.SelfHostedICAConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdateHistory) > 0 {
		for iNdEx := len(m.UpdateHistory) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdateHistory[iNdEx], dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdateHistory[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintFlow(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0x52
		}
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintFlow(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x4a
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExecTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintFlow(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x42
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintFlow(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x3a
	n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Interval):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintFlow(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x32
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FeeAddress) > 0 {
		i -= len(m.FeeAddress)
		copy(dAtA[i:], m.FeeAddress)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.FeeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICAConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICAConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICAConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionID) > 0 {
		i -= len(m.ConnectionID)
		copy(dAtA[i:], m.ConnectionID)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ConnectionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortID) > 0 {
		i -= len(m.PortID)
		copy(dAtA[i:], m.PortID)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.PortID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrustlessAgentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustlessAgentConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustlessAgentConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FallbackToOwnerBalance {
		i--
		if m.FallbackToOwnerBalance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StopOnTimeout {
		i--
		if m.StopOnTimeout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.StopOnFailure {
		i--
		if m.StopOnFailure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StopOnSuccess {
		i--
		if m.StopOnSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UpdatingDisabled {
		i--
		if m.UpdatingDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SaveResponses {
		i--
		if m.SaveResponses {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowHistoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowHistoryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowHistoryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PacketSequence != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.PacketSequence))
		i--
		dAtA[i] = 0x48
	}
	if len(m.QueryResponses) > 0 {
		for iNdEx := len(m.QueryResponses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QueryResponses[iNdEx])
			copy(dAtA[i:], m.QueryResponses[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.QueryResponses[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MsgResponses) > 0 {
		for iNdEx := len(m.MsgResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintFlow(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TimedOut {
		i--
		if m.TimedOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExecFee) > 0 {
		for iNdEx := len(m.ExecFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n9, err9 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ActualExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ActualExecTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintFlow(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x12
	n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ScheduledExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ScheduledExecTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintFlow(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExecutionConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseAndForComparisons {
		i--
		if m.UseAndForComparisons {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.SkipOnSuccessOf) > 0 {
		dAtA12 := make([]byte, len(m.SkipOnSuccessOf)*10)
		var j11 int
		for _, num := range m.SkipOnSuccessOf {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintFlow(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SkipOnFailureOf) > 0 {
		dAtA14 := make([]byte, len(m.SkipOnFailureOf)*10)
		var j13 int
		for _, num := range m.SkipOnFailureOf {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintFlow(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StopOnFailureOf) > 0 {
		dAtA16 := make([]byte, len(m.StopOnFailureOf)*10)
		var j15 int
		for _, num := range m.StopOnFailureOf {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintFlow(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StopOnSuccessOf) > 0 {
		dAtA18 := make([]byte, len(m.StopOnSuccessOf)*10)
		var j17 int
		for _, num := range m.StopOnSuccessOf {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintFlow(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FeedbackLoops) > 0 {
		for iNdEx := len(m.FeedbackLoops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedbackLoops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Comparisons) > 0 {
		for iNdEx := len(m.Comparisons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comparisons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeedbackLoop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedbackLoop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedbackLoop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ICQConfig != nil {
		{
			size, err := m.ICQConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ValueType) > 0 {
		i -= len(m.ValueType)
		copy(dAtA[i:], m.ValueType)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ValueType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MsgKey) > 0 {
		i -= len(m.MsgKey)
		copy(dAtA[i:], m.MsgKey)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.MsgKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MsgsIndex != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.MsgsIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.ResponseIndex != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ResponseIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ResponseKey) > 0 {
		i -= len(m.ResponseKey)
		copy(dAtA[i:], m.ResponseKey)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ResponseKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.FlowID != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.FlowID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Comparison) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comparison) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comparison) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ICQConfig != nil {
		{
			size, err := m.ICQConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Operand) > 0 {
		i -= len(m.Operand)
		copy(dAtA[i:], m.Operand)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Operand)))
		i--
		dAtA[i] = 0x32
	}
	if m.Operator != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ValueType) > 0 {
		i -= len(m.ValueType)
		copy(dAtA[i:], m.ValueType)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ValueType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResponseKey) > 0 {
		i -= len(m.ResponseKey)
		copy(dAtA[i:], m.ResponseKey)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ResponseKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResponseIndex != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ResponseIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.FlowID != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.FlowID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICQConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICQConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICQConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.QueryKey) > 0 {
		i -= len(m.QueryKey)
		copy(dAtA[i:], m.QueryKey)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.QueryKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.QueryType) > 0 {
		i -= len(m.QueryType)
		copy(dAtA[i:], m.QueryType)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.QueryType)))
		i--
		dAtA[i] = 0x2a
	}
	n21, err21 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TimeoutDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration):])
	if err21 != nil {
		return 0, err21
	}
	i -= n21
	i = encodeVarintFlow(dAtA, i, uint64(n21))
	i--
	dAtA[i] = 0x22
	if m.TimeoutPolicy != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.TimeoutPolicy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintFlow(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlow(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovFlow(uint64(m.ID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.FeeAddress)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovFlow(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFlow(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExecTime)
	n += 1 + l + sovFlow(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovFlow(uint64(l))
	if len(m.UpdateHistory) > 0 {
		for _, e := range m.UpdateHistory {
			l = github_com_cosmos_gogoproto_types.SizeOfStdTime(e)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.SelfHostedICAConfig != nil {
		l = m.SelfHostedICAConfig.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.TrustlessAgentConfig != nil {
		l = m.TrustlessAgentConfig.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Conditions != nil {
		l = m.Conditions.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *ICAConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.ConnectionID)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *TrustlessAgentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	return n
}

func (m *ExecutionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaveResponses {
		n += 2
	}
	if m.UpdatingDisabled {
		n += 2
	}
	if m.StopOnSuccess {
		n += 2
	}
	if m.StopOnFailure {
		n += 2
	}
	if m.StopOnTimeout {
		n += 2
	}
	if m.FallbackToOwnerBalance {
		n += 2
	}
	return n
}

func (m *FlowHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	return n
}

func (m *FlowHistoryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ScheduledExecTime)
	n += 1 + l + sovFlow(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ActualExecTime)
	n += 1 + l + sovFlow(uint64(l))
	if len(m.ExecFee) > 0 {
		for _, e := range m.ExecFee {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.Executed {
		n += 2
	}
	if m.TimedOut {
		n += 2
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.MsgResponses) > 0 {
		for _, e := range m.MsgResponses {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.QueryResponses) > 0 {
		for _, s := range m.QueryResponses {
			l = len(s)
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if m.PacketSequence != 0 {
		n += 1 + sovFlow(uint64(m.PacketSequence))
	}
	return n
}

func (m *ExecutionConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comparisons) > 0 {
		for _, e := range m.Comparisons {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.FeedbackLoops) > 0 {
		for _, e := range m.FeedbackLoops {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	if len(m.StopOnSuccessOf) > 0 {
		l = 0
		for _, e := range m.StopOnSuccessOf {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if len(m.StopOnFailureOf) > 0 {
		l = 0
		for _, e := range m.StopOnFailureOf {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if len(m.SkipOnFailureOf) > 0 {
		l = 0
		for _, e := range m.SkipOnFailureOf {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if len(m.SkipOnSuccessOf) > 0 {
		l = 0
		for _, e := range m.SkipOnSuccessOf {
			l += sovFlow(uint64(e))
		}
		n += 1 + sovFlow(uint64(l)) + l
	}
	if m.UseAndForComparisons {
		n += 2
	}
	return n
}

func (m *FeedbackLoop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowID != 0 {
		n += 1 + sovFlow(uint64(m.FlowID))
	}
	l = len(m.ResponseKey)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.ResponseIndex != 0 {
		n += 1 + sovFlow(uint64(m.ResponseIndex))
	}
	if m.MsgsIndex != 0 {
		n += 1 + sovFlow(uint64(m.MsgsIndex))
	}
	l = len(m.MsgKey)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.ValueType)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.ICQConfig != nil {
		l = m.ICQConfig.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *Comparison) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowID != 0 {
		n += 1 + sovFlow(uint64(m.FlowID))
	}
	if m.ResponseIndex != 0 {
		n += 1 + sovFlow(uint64(m.ResponseIndex))
	}
	l = len(m.ResponseKey)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.ValueType)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Operator != 0 {
		n += 1 + sovFlow(uint64(m.Operator))
	}
	l = len(m.Operand)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.ICQConfig != nil {
		l = m.ICQConfig.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *ICQConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.TimeoutPolicy != 0 {
		n += 1 + sovFlow(uint64(m.TimeoutPolicy))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutDuration)
	n += 1 + l + sovFlow(uint64(l))
	l = len(m.QueryType)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.QueryKey)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func sovFlow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlow(x uint64) (n int) {
	return sovFlow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateHistory = append(m.UpdateHistory, time.Time{})
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&(m.UpdateHistory[len(m.UpdateHistory)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfHostedICAConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfHostedICAConfig == nil {
				m.SelfHostedICAConfig = &ICAConfig{}
			}
			if err := m.SelfHostedICAConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustlessAgentConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustlessAgentConfig == nil {
				m.TrustlessAgentConfig = &TrustlessAgentConfig{}
			}
			if err := m.TrustlessAgentConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &ExecutionConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = &ExecutionConditions{}
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICAConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICAConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICAConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrustlessAgentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustlessAgentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustlessAgentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types1.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveResponses", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaveResponses = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatingDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatingDisabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopOnSuccess = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnFailure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopOnFailure = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnTimeout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopOnTimeout = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackToOwnerBalance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FallbackToOwnerBalance = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, FlowHistoryEntry{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowHistoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowHistoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowHistoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ScheduledExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ActualExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecFee = append(m.ExecFee, types1.Coin{})
			if err := m.ExecFee[len(m.ExecFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimedOut = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResponses = append(m.MsgResponses, &types.Any{})
			if err := m.MsgResponses[len(m.MsgResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResponses = append(m.QueryResponses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSequence", wireType)
			}
			m.PacketSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comparisons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comparisons = append(m.Comparisons, &Comparison{})
			if err := m.Comparisons[len(m.Comparisons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackLoops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedbackLoops = append(m.FeedbackLoops, &FeedbackLoop{})
			if err := m.FeedbackLoops[len(m.FeedbackLoops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StopOnSuccessOf = append(m.StopOnSuccessOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StopOnSuccessOf) == 0 {
					m.StopOnSuccessOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StopOnSuccessOf = append(m.StopOnSuccessOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnSuccessOf", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StopOnFailureOf = append(m.StopOnFailureOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StopOnFailureOf) == 0 {
					m.StopOnFailureOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StopOnFailureOf = append(m.StopOnFailureOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StopOnFailureOf", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkipOnFailureOf = append(m.SkipOnFailureOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SkipOnFailureOf) == 0 {
					m.SkipOnFailureOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkipOnFailureOf = append(m.SkipOnFailureOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipOnFailureOf", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkipOnSuccessOf = append(m.SkipOnSuccessOf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFlow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SkipOnSuccessOf) == 0 {
					m.SkipOnSuccessOf = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkipOnSuccessOf = append(m.SkipOnSuccessOf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipOnSuccessOf", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAndForComparisons", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseAndForComparisons = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedbackLoop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedbackLoop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedbackLoop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowID", wireType)
			}
			m.FlowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseIndex", wireType)
			}
			m.ResponseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsIndex", wireType)
			}
			m.MsgsIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgsIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ICQConfig == nil {
				m.ICQConfig = &ICQConfig{}
			}
			if err := m.ICQConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comparison) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comparison: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comparison: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowID", wireType)
			}
			m.FlowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseIndex", wireType)
			}
			m.ResponseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= ComparisonOperator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ICQConfig == nil {
				m.ICQConfig = &ICQConfig{}
			}
			if err := m.ICQConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICQConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICQConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICQConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutPolicy", wireType)
			}
			m.TimeoutPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutPolicy |= types2.TimeoutPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TimeoutDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response[:0], dAtA[iNdEx:postIndex]...)
			if m.Response == nil {
				m.Response = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlow = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intento/intent/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryInterchainAccountFromAddressRequest is the request type for the
// Query/InterchainAccountAddress RPC
type QueryInterchainAccountFromAddressRequest struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *QueryInterchainAccountFromAddressRequest) Reset() {
	*m = QueryInterchainAccountFromAddressRequest{}
}
func (m *QueryInterchainAccountFromAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInterchainAccountFromAddressRequest) ProtoMessage()    {}
func (*QueryInterchainAccountFromAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{0}
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInterchainAccountFromAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInterchainAccountFromAddressRequest.Merge(m, src)
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInterchainAccountFromAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInterchainAccountFromAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInterchainAccountFromAddressRequest proto.InternalMessageInfo

// QueryInterchainAccountFromAddressResponse the response type for the
// Query/InterchainAccountAddress RPC
type QueryInterchainAccountFromAddressResponse struct {
	InterchainAccountAddress string `protobuf:"bytes,1,opt,name=interchain_account_address,json=interchainAccountAddress,proto3" json:"interchain_account_address,omitempty" yaml:"interchain_account_address"`
}

func (m *QueryInterchainAccountFromAddressResponse) Reset() {
	*m = QueryInterchainAccountFromAddressResponse{}
}
func (m *QueryInterchainAccountFromAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInterchainAccountFromAddressResponse) ProtoMessage() {}
func (*QueryInterchainAccountFromAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{1}
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInterchainAccountFromAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInterchainAccountFromAddressResponse.Merge(m, src)
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInterchainAccountFromAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInterchainAccountFromAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInterchainAccountFromAddressResponse proto.InternalMessageInfo

// QueryFlowRequest is the request type for the Query/FlowRequest RPC
type QueryFlowRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryFlowRequest) Reset()         { *m = QueryFlowRequest{} }
func (m *QueryFlowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFlowRequest) ProtoMessage()    {}
func (*QueryFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{2}
}
func (m *QueryFlowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowRequest.Merge(m, src)
}
func (m *QueryFlowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowRequest proto.InternalMessageInfo

// QueryFlowResponse the response type for the Query/FlowRequest RPC
type QueryFlowResponse struct {
	Flow Flow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow"`
}

func (m *QueryFlowResponse) Reset()         { *m = QueryFlowResponse{} }
func (m *QueryFlowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFlowResponse) ProtoMessage()    {}
func (*QueryFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{3}
}
func (m *QueryFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowResponse.Merge(m, src)
}
func (m *QueryFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowResponse proto.InternalMessageInfo

// QueryFlowHistoryRequest is the request type for the
// Query/QueryFlowHistoryRequest RPC
type QueryFlowHistoryRequest struct {
	// id of the flow
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFlowHistoryRequest) Reset()         { *m = QueryFlowHistoryRequest{} }
func (m *QueryFlowHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFlowHistoryRequest) ProtoMessage()    {}
func (*QueryFlowHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{4}
}
func (m *QueryFlowHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowHistoryRequest.Merge(m, src)
}
func (m *QueryFlowHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowHistoryRequest proto.InternalMessageInfo

// QueryFlowHistoryResponse the response type for the
// Query/QueryFlowHistoryResponse RPC
type QueryFlowHistoryResponse struct {
	History []FlowHistoryEntry `protobuf:"bytes,1,rep,name=history,proto3" json:"history"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFlowHistoryResponse) Reset()         { *m = QueryFlowHistoryResponse{} }
func (m *QueryFlowHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFlowHistoryResponse) ProtoMessage()    {}
func (*QueryFlowHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{5}
}
func (m *QueryFlowHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowHistoryResponse.Merge(m, src)
}
func (m *QueryFlowHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowHistoryResponse proto.InternalMessageInfo

// QueryFlowsRequest is the request type for the Query/FlowsRequest RPC
type QueryFlowsRequest struct {
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFlowsRequest) Reset()         { *m = QueryFlowsRequest{} }
func (m *QueryFlowsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFlowsRequest) ProtoMessage()    {}
func (*QueryFlowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{6}
}
func (m *QueryFlowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowsRequest.Merge(m, src)
}
func (m *QueryFlowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowsRequest proto.InternalMessageInfo

// QueryFlowsResponse the response type for the Query/FlowsRequest RPCπ
type QueryFlowsResponse struct {
	Flows []Flow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFlowsResponse) Reset()         { *m = QueryFlowsResponse{} }
func (m *QueryFlowsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFlowsResponse) ProtoMessage()    {}
func (*QueryFlowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{7}
}
func (m *QueryFlowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowsResponse.Merge(m, src)
}
func (m *QueryFlowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowsResponse proto.InternalMessageInfo

// QueryFlowsForOwnerRequest is the request type for the
// Query/FlowsForOwnerRequest RPC
type QueryFlowsForOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFlowsForOwnerRequest) Reset()         { *m = QueryFlowsForOwnerRequest{} }
func (m *QueryFlowsForOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFlowsForOwnerRequest) ProtoMessage()    {}
func (*QueryFlowsForOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{8}
}
func (m *QueryFlowsForOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowsForOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowsForOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowsForOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowsForOwnerRequest.Merge(m, src)
}
func (m *QueryFlowsForOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowsForOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowsForOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowsForOwnerRequest proto.InternalMessageInfo

// QueryFlowsForOwnerResponse the response type for the
// Query/FlowsForOwnerRequest RPC
type QueryFlowsForOwnerResponse struct {
	Flows []Flow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFlowsForOwnerResponse) Reset()         { *m = QueryFlowsForOwnerResponse{} }
func (m *QueryFlowsForOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFlowsForOwnerResponse) ProtoMessage()    {}
func (*QueryFlowsForOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{9}
}
func (m *QueryFlowsForOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlowsForOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlowsForOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlowsForOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlowsForOwnerResponse.Merge(m, src)
}
func (m *QueryFlowsForOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlowsForOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlowsForOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlowsForOwnerResponse proto.InternalMessageInfo

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryTrustlessAgent is the request type for the Query/Params RPC method.
type QueryTrustlessAgentRequest struct {
	AgentAddress string `protobuf:"bytes,1,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
}

func (m *QueryTrustlessAgentRequest) Reset()         { *m = QueryTrustlessAgentRequest{} }
func (m *QueryTrustlessAgentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrustlessAgentRequest) ProtoMessage()    {}
func (*QueryTrustlessAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{12}
}
func (m *QueryTrustlessAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrustlessAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrustlessAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrustlessAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrustlessAgentRequest.Merge(m, src)
}
func (m *QueryTrustlessAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrustlessAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrustlessAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrustlessAgentRequest proto.InternalMessageInfo

// QueryTrustlessAgentResponse is the response type for the Query/TrustlessAgent
// RPC method.
type QueryTrustlessAgentResponse struct {
	// TrustlessAgent
	TrustlessAgent TrustlessAgent `protobuf:"bytes,1,opt,name=trustless_agent,json=trustlessAgent,proto3" json:"trustless_agent"`
}

func (m *QueryTrustlessAgentResponse) Reset()         { *m = QueryTrustlessAgentResponse{} }
func (m *QueryTrustlessAgentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrustlessAgentResponse) ProtoMessage()    {}
func (*QueryTrustlessAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{13}
}
func (m *QueryTrustlessAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrustlessAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrustlessAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrustlessAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrustlessAgentResponse.Merge(m, src)
}
func (m *QueryTrustlessAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrustlessAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrustlessAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrustlessAgentResponse proto.InternalMessageInfo

// QueryTrustlessAgents is the request type for the Query/TrustlessAgent RPC
// method.
type QueryTrustlessAgentsRequest struct {
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTrustlessAgentsRequest) Reset()         { *m = QueryTrustlessAgentsRequest{} }
func (m *QueryTrustlessAgentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrustlessAgentsRequest) ProtoMessage()    {}
func (*QueryTrustlessAgentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{14}
}
func (m *QueryTrustlessAgentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrustlessAgentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrustlessAgentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrustlessAgentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrustlessAgentsRequest.Merge(m, src)
}
func (m *QueryTrustlessAgentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrustlessAgentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrustlessAgentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrustlessAgentsRequest proto.InternalMessageInfo

// QueryTrustlessAgentsResponse is the response type for the Query/TrustlessAgent
// RPC method.
type QueryTrustlessAgentsResponse struct {
	// TrustlessAgents
	TrustlessAgents []TrustlessAgent `protobuf:"bytes,1,rep,name=trustless_agents,json=trustlessAgents,proto3" json:"trustless_agents"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTrustlessAgentsResponse) Reset()         { *m = QueryTrustlessAgentsResponse{} }
func (m *QueryTrustlessAgentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrustlessAgentsResponse) ProtoMessage()    {}
func (*QueryTrustlessAgentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{15}
}
func (m *QueryTrustlessAgentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrustlessAgentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrustlessAgentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrustlessAgentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrustlessAgentsResponse.Merge(m, src)
}
func (m *QueryTrustlessAgentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrustlessAgentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrustlessAgentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrustlessAgentsResponse proto.InternalMessageInfo

// QueryTrustlessAgentsByFeeAdminRequest
type QueryTrustlessAgentsByFeeAdminRequest struct {
	FeeAdmin string `protobuf:"bytes,1,opt,name=fee_admin,json=feeAdmin,proto3" json:"fee_admin,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTrustlessAgentsByFeeAdminRequest) Reset()         { *m = QueryTrustlessAgentsByFeeAdminRequest{} }
func (m *QueryTrustlessAgentsByFeeAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrustlessAgentsByFeeAdminRequest) ProtoMessage()    {}
func (*QueryTrustlessAgentsByFeeAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{16}
}
func (m *QueryTrustlessAgentsByFeeAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrustlessAgentsByFeeAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrustlessAgentsByFeeAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrustlessAgentsByFeeAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrustlessAgentsByFeeAdminRequest.Merge(m, src)
}
func (m *QueryTrustlessAgentsByFeeAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrustlessAgentsByFeeAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrustlessAgentsByFeeAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrustlessAgentsByFeeAdminRequest proto.InternalMessageInfo

// QueryTrustlessAgentResponse is the response type for the Query/TrustlessAgent
// RPC method.
type QueryTrustlessAgentsByFeeAdminResponse struct {
	// TrustlessAgents
	TrustlessAgents []TrustlessAgent `protobuf:"bytes,1,rep,name=trustless_agents,json=trustlessAgents,proto3" json:"trustless_agents"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTrustlessAgentsByFeeAdminResponse) Reset() {
	*m = QueryTrustlessAgentsByFeeAdminResponse{}
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrustlessAgentsByFeeAdminResponse) ProtoMessage()    {}
func (*QueryTrustlessAgentsByFeeAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{17}
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrustlessAgentsByFeeAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrustlessAgentsByFeeAdminResponse.Merge(m, src)
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrustlessAgentsByFeeAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrustlessAgentsByFeeAdminResponse proto.InternalMessageInfo

// QueryTotalBurntRequest is the request type for the Query/TotalBurnt RPC method.
type QueryTotalBurntRequest struct {
}

func (m *QueryTotalBurntRequest) Reset()         { *m = QueryTotalBurntRequest{} }
func (m *QueryTotalBurntRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBurntRequest) ProtoMessage()    {}
func (*QueryTotalBurntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{18}
}
func (m *QueryTotalBurntRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBurntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBurntRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBurntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBurntRequest.Merge(m, src)
}
func (m *QueryTotalBurntRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBurntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBurntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBurntRequest proto.InternalMessageInfo

// QueryTotalBurntResponse is the response type for the Query/TotalBurnt RPC method.
type QueryTotalBurntResponse struct {
	// total_burnt defines the total amount that has been burnt
	TotalBurnt types.Coin `protobuf:"bytes,1,opt,name=total_burnt,json=totalBurnt,proto3" json:"total_burnt"`
}

func (m *QueryTotalBurntResponse) Reset()         { *m = QueryTotalBurntResponse{} }
func (m *QueryTotalBurntResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBurntResponse) ProtoMessage()    {}
func (*QueryTotalBurntResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_350c05bafe93a365, []int{19}
}
func (m *QueryTotalBurntResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBurntResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBurntResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBurntResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBurntResponse.Merge(m, src)
}
func (m *QueryTotalBurntResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBurntResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBurntResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBurntResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryInterchainAccountFromAddressRequest)(nil), "intento.intent.v1.QueryInterchainAccountFromAddressRequest")
	proto.RegisterType((*QueryInterchainAccountFromAddressResponse)(nil), "intento.intent.v1.QueryInterchainAccountFromAddressResponse")
	proto.RegisterType((*QueryFlowRequest)(nil), "intento.intent.v1.QueryFlowRequest")
	proto.RegisterType((*QueryFlowResponse)(nil), "intento.intent.v1.QueryFlowResponse")
	proto.RegisterType((*QueryFlowHistoryRequest)(nil), "intento.intent.v1.QueryFlowHistoryRequest")
	proto.RegisterType((*QueryFlowHistoryResponse)(nil), "intento.intent.v1.QueryFlowHistoryResponse")
	proto.RegisterType((*QueryFlowsRequest)(nil), "intento.intent.v1.QueryFlowsRequest")
	proto.RegisterType((*QueryFlowsResponse)(nil), "intento.intent.v1.QueryFlowsResponse")
	proto.RegisterType((*QueryFlowsForOwnerRequest)(nil), "intento.intent.v1.QueryFlowsForOwnerRequest")
	proto.RegisterType((*QueryFlowsForOwnerResponse)(nil), "intento.intent.v1.QueryFlowsForOwnerResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "intento.intent.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "intento.intent.v1.QueryParamsResponse")
	proto.RegisterType((*QueryTrustlessAgentRequest)(nil), "intento.intent.v1.QueryTrustlessAgentRequest")
	proto.RegisterType((*QueryTrustlessAgentResponse)(nil), "intento.intent.v1.QueryTrustlessAgentResponse")
	proto.RegisterType((*QueryTrustlessAgentsRequest)(nil), "intento.intent.v1.QueryTrustlessAgentsRequest")
	proto.RegisterType((*QueryTrustlessAgentsResponse)(nil), "intento.intent.v1.QueryTrustlessAgentsResponse")
	proto.RegisterType((*QueryTrustlessAgentsByFeeAdminRequest)(nil), "intento.intent.v1.QueryTrustlessAgentsByFeeAdminRequest")
	proto.RegisterType((*QueryTrustlessAgentsByFeeAdminResponse)(nil), "intento.intent.v1.QueryTrustlessAgentsByFeeAdminResponse")
	proto.RegisterType((*QueryTotalBurntRequest)(nil), "intento.intent.v1.QueryTotalBurntRequest")
	proto.RegisterType((*QueryTotalBurntResponse)(nil), "intento.intent.v1.QueryTotalBurntResponse")
}

func init() { proto.RegisterFile("intento/intent/v1/query.proto", fileDescriptor_350c05bafe93a365) }

var fileDescriptor_350c05bafe93a365 = []byte{
	// 1115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x3d, 0x21, 0x09, 0xf4, 0xe5, 0x57, 0x3b, 0x44, 0xd4, 0xd9, 0x04, 0x37, 0x59, 0x27,
	0x69, 0x92, 0x36, 0xbb, 0x72, 0x8a, 0x54, 0x28, 0x1c, 0x48, 0x2a, 0x0c, 0x95, 0x10, 0x04, 0x8b,
	0x13, 0x3d, 0x58, 0x6b, 0x7b, 0xe2, 0xac, 0x64, 0xef, 0x38, 0x3b, 0xe3, 0x04, 0x13, 0xe5, 0xc2,
	0x99, 0x43, 0xf9, 0x21, 0x0e, 0x70, 0xe0, 0x5a, 0x89, 0x3f, 0x81, 0x2b, 0x48, 0xe1, 0x56, 0x89,
	0x0b, 0xa7, 0x0a, 0x12, 0xfe, 0x02, 0xfe, 0x02, 0xb4, 0xb3, 0x6f, 0x9d, 0x5d, 0x7b, 0xd7, 0x5e,
	0x45, 0x39, 0xd0, 0x53, 0x9c, 0x99, 0xef, 0xbc, 0xf7, 0x79, 0x33, 0x6f, 0xde, 0x9b, 0x85, 0xd7,
	0x6d, 0x47, 0x32, 0x47, 0x72, 0xd3, 0xff, 0x6b, 0x1e, 0x16, 0xcc, 0x83, 0x36, 0x73, 0x3b, 0x46,
	0xcb, 0xe5, 0x92, 0xd3, 0x1b, 0x38, 0x6d, 0xf8, 0x7f, 0x8d, 0xc3, 0x82, 0xb6, 0x51, 0xe5, 0xa2,
	0xc9, 0x85, 0x59, 0xb1, 0x04, 0xf3, 0xb5, 0xe6, 0x61, 0xa1, 0xc2, 0xa4, 0x55, 0x30, 0x5b, 0x56,
	0xdd, 0x76, 0x2c, 0x69, 0x73, 0xc7, 0x5f, 0xae, 0xe5, 0xc2, 0xda, 0x40, 0x55, 0xe5, 0x76, 0x30,
	0x3f, 0x5b, 0xe7, 0x75, 0xae, 0x7e, 0x9a, 0xde, 0x2f, 0x1c, 0x5d, 0xa8, 0x73, 0x5e, 0x6f, 0x30,
	0xd3, 0x6a, 0xd9, 0xa6, 0xe5, 0x38, 0x5c, 0x2a, 0x93, 0x22, 0x98, 0xed, 0x27, 0xde, 0x6b, 0xf0,
	0x23, 0x9c, 0xbd, 0xdd, 0x3f, 0x2b, 0xdd, 0xb6, 0x90, 0x0d, 0x26, 0x44, 0xd9, 0xaa, 0x7b, 0x31,
	0x20, 0x5a, 0xbf, 0xb0, 0x65, 0xb9, 0x56, 0x13, 0xdd, 0xe8, 0x0c, 0xd6, 0x3e, 0xf1, 0x82, 0x7b,
	0xe4, 0x48, 0xe6, 0x56, 0xf7, 0x2d, 0xdb, 0xd9, 0xae, 0x56, 0x79, 0xdb, 0x91, 0x45, 0x97, 0x37,
	0xb7, 0x6b, 0x35, 0x97, 0x09, 0x51, 0x62, 0x07, 0x6d, 0x26, 0x24, 0x9d, 0x85, 0x31, 0x7e, 0xe4,
	0x30, 0x37, 0x4b, 0x16, 0xc9, 0xda, 0xb5, 0x92, 0xff, 0x0f, 0xcd, 0xc3, 0x54, 0x95, 0x3b, 0x0e,
	0xab, 0x7a, 0xf4, 0x65, 0xbb, 0x96, 0x1d, 0x51, 0xb3, 0x93, 0x17, 0x83, 0x8f, 0x6a, 0xfa, 0x13,
	0x02, 0xeb, 0x29, 0xfc, 0x88, 0x16, 0x77, 0x04, 0xa3, 0x55, 0xd0, 0xec, 0xae, 0xae, 0x6c, 0xf9,
	0xc2, 0xb2, 0xe5, 0xab, 0x7c, 0xef, 0x3b, 0x2b, 0xff, 0x3e, 0xbf, 0xb5, 0xd4, 0xb1, 0x9a, 0x8d,
	0x07, 0x7a, 0xb2, 0x56, 0x2f, 0x65, 0xed, 0x5e, 0x87, 0xe8, 0x4c, 0xd7, 0xe1, 0xba, 0x22, 0x2a,
	0x36, 0xf8, 0x51, 0x10, 0xe1, 0x34, 0x8c, 0xd8, 0x35, 0x0c, 0x6f, 0xc4, 0xae, 0xe9, 0x45, 0xb8,
	0x11, 0xd2, 0x20, 0x5d, 0x01, 0x46, 0xbd, 0x93, 0x50, 0xb2, 0x89, 0xad, 0x9b, 0x46, 0x5f, 0xee,
	0x18, 0x9e, 0x7c, 0x67, 0xf4, 0xf4, 0xf9, 0xad, 0x4c, 0x49, 0x49, 0xf5, 0x03, 0xb8, 0xd9, 0xb5,
	0xf3, 0x81, 0x2d, 0x24, 0x77, 0x3b, 0x09, 0x2e, 0x69, 0x11, 0xe0, 0x22, 0xbf, 0xd4, 0x5e, 0x4e,
	0x6c, 0xad, 0x1a, 0x7e, 0x82, 0x19, 0x5e, 0x82, 0x19, 0x7e, 0xe2, 0x62, 0x9a, 0x19, 0xbb, 0x56,
	0x9d, 0xa1, 0xad, 0x52, 0x68, 0xa5, 0xfe, 0x94, 0x40, 0xb6, 0xdf, 0x27, 0x86, 0xf0, 0x10, 0x5e,
	0xde, 0xf7, 0x87, 0xb2, 0x64, 0xf1, 0xa5, 0xb5, 0x89, 0xad, 0x7c, 0x42, 0x14, 0xb8, 0xf0, 0x3d,
	0x47, 0xba, 0x1d, 0x8c, 0x28, 0x58, 0x49, 0xdf, 0x8f, 0x21, 0xbd, 0x3d, 0x94, 0xd4, 0x27, 0x88,
	0xa0, 0x3e, 0x0e, 0xed, 0x72, 0x37, 0xd9, 0xa2, 0xfb, 0x40, 0x2e, 0xbd, 0x0f, 0xdf, 0x10, 0xa0,
	0x61, 0xeb, 0xb8, 0x03, 0xf7, 0x60, 0xcc, 0x3b, 0x19, 0x81, 0xf1, 0x0f, 0x39, 0x45, 0x5f, 0x7b,
	0x75, 0x11, 0x77, 0x60, 0xee, 0x82, 0xa9, 0xc8, 0xdd, 0x8f, 0xbd, 0x9b, 0x34, 0xf8, 0x9a, 0x5d,
	0x55, 0x5e, 0xfc, 0x40, 0x40, 0x8b, 0xf3, 0xfd, 0xbf, 0xd8, 0x97, 0x59, 0x3c, 0xab, 0x5d, 0x55,
	0xa2, 0x10, 0x5f, 0xff, 0x08, 0x5e, 0x8d, 0x8c, 0x22, 0xea, 0x7d, 0x18, 0xf7, 0x4b, 0x19, 0x66,
	0xc7, 0x5c, 0x0c, 0xab, 0xbf, 0x04, 0x69, 0x51, 0xae, 0x6f, 0xe3, 0x0e, 0x7c, 0x1a, 0x54, 0xcc,
	0x6d, 0xaf, 0x60, 0x06, 0xdb, 0x9f, 0x87, 0x29, 0x55, 0x40, 0xa3, 0xf5, 0xa6, 0x34, 0xa9, 0x06,
	0x83, 0xe2, 0xc1, 0x61, 0x3e, 0xd6, 0x04, 0xa2, 0xed, 0xc2, 0x4c, 0x4f, 0x39, 0x46, 0xc6, 0xa5,
	0x18, 0xc6, 0xa8, 0x0d, 0x64, 0x9d, 0x96, 0x91, 0x51, 0x9d, 0xc5, 0x3a, 0xbc, 0xf2, 0xdb, 0xf2,
	0x0b, 0x81, 0x85, 0x78, 0x3f, 0x18, 0x59, 0x09, 0xae, 0xf7, 0x44, 0x16, 0xa4, 0x4a, 0xea, 0xd0,
	0x66, 0xa2, 0xa1, 0x5d, 0x61, 0xfa, 0x7c, 0x45, 0x60, 0x25, 0x8e, 0x7e, 0xa7, 0x53, 0x64, 0x6c,
	0xbb, 0xd6, 0xb4, 0x9d, 0x60, 0xbf, 0xe6, 0xe1, 0xda, 0x1e, 0x63, 0x65, 0xcb, 0x1b, 0xc3, 0x03,
	0x7e, 0x65, 0x0f, 0x35, 0x57, 0x76, 0xd5, 0x7e, 0x23, 0xb0, 0x3a, 0x0c, 0xe7, 0x45, 0xd8, 0xd6,
	0x2c, 0xbc, 0xe6, 0x87, 0xc1, 0xa5, 0xd5, 0xd8, 0x69, 0xbb, 0xdd, 0xbb, 0xa2, 0x3f, 0xc6, 0xbe,
	0x16, 0x9e, 0xc1, 0x88, 0xde, 0x85, 0x09, 0xe9, 0x8d, 0x96, 0x2b, 0xde, 0x70, 0xf7, 0x8a, 0x86,
	0xdd, 0x07, 0x8e, 0x1f, 0x72, 0xdb, 0xc1, 0x20, 0x40, 0x76, 0x2d, 0x6d, 0xfd, 0x38, 0x09, 0x63,
	0xca, 0x3a, 0xfd, 0x95, 0xc0, 0xc2, 0xa0, 0x87, 0x03, 0x7d, 0x3b, 0x66, 0x93, 0xd2, 0x3e, 0x6b,
	0xb4, 0x77, 0x2e, 0xb7, 0xd8, 0x8f, 0x53, 0x5f, 0xff, 0xf2, 0x8f, 0x7f, 0xbe, 0x1d, 0xc9, 0xd3,
	0x25, 0xb3, 0xff, 0xa5, 0x85, 0x15, 0x64, 0x53, 0xf2, 0x4d, 0xbb, 0x6a, 0xd1, 0x23, 0x18, 0xf5,
	0x6a, 0x27, 0xcd, 0x27, 0x39, 0x0c, 0x3d, 0x45, 0xb4, 0xe5, 0xc1, 0x22, 0xf4, 0xbe, 0xac, 0xbc,
	0xe7, 0xe8, 0x82, 0x19, 0xff, 0x5c, 0x34, 0x8f, 0xed, 0xda, 0x09, 0xfd, 0x8e, 0xc0, 0x44, 0xa8,
	0x9b, 0xd3, 0x8d, 0x41, 0xb6, 0xa3, 0xef, 0x13, 0xed, 0x4e, 0x2a, 0x2d, 0xe2, 0xdc, 0x55, 0x38,
	0xab, 0x74, 0x39, 0x01, 0x67, 0x13, 0xdf, 0x0e, 0x3e, 0xd6, 0x21, 0x8c, 0xa9, 0x26, 0x44, 0x07,
	0xc6, 0xda, 0x3d, 0xa7, 0x95, 0x21, 0x2a, 0x64, 0x58, 0x54, 0x0c, 0x1a, 0xcd, 0x26, 0x30, 0x08,
	0xfa, 0x3d, 0x81, 0xa9, 0x48, 0xf7, 0xa3, 0x77, 0x07, 0x9a, 0xee, 0x69, 0xd0, 0xda, 0x66, 0x4a,
	0x35, 0x02, 0xad, 0x29, 0x20, 0x9d, 0x2e, 0x26, 0x01, 0x99, 0xc7, 0xaa, 0xc5, 0x9f, 0xd0, 0x9f,
	0x09, 0x4c, 0x47, 0xef, 0x36, 0x4d, 0xf4, 0x15, 0xdb, 0xbc, 0x34, 0x23, 0xad, 0x1c, 0xd9, 0x1e,
	0x28, 0xb6, 0x37, 0xe8, 0x96, 0x39, 0xe0, 0x83, 0x62, 0x53, 0x15, 0x24, 0xf3, 0x38, 0xd2, 0x16,
	0x4f, 0xe8, 0x4f, 0x04, 0x66, 0x7a, 0x2a, 0x1b, 0x4d, 0xe9, 0xbf, 0x7b, 0xa6, 0x66, 0x6a, 0x3d,
	0x02, 0xdf, 0x51, 0xc0, 0x2b, 0x34, 0x3f, 0x1c, 0x58, 0xd0, 0xdf, 0x09, 0xcc, 0x25, 0xd6, 0x5e,
	0xfa, 0x66, 0x4a, 0xdf, 0x7d, 0xdd, 0x43, 0x7b, 0xeb, 0x12, 0x2b, 0x91, 0xff, 0xbe, 0xe2, 0x2f,
	0x50, 0x33, 0x05, 0xbf, 0x79, 0xdc, 0xed, 0x51, 0x27, 0xf4, 0x0b, 0x18, 0xf7, 0x1f, 0x33, 0x34,
	0xf1, 0x1e, 0x44, 0x5e, 0x4d, 0xda, 0xea, 0x30, 0x19, 0x12, 0x2d, 0x29, 0xa2, 0x79, 0x3a, 0x67,
	0x26, 0x7d, 0x2a, 0xd2, 0xaf, 0x09, 0xc0, 0x45, 0x89, 0xa7, 0xeb, 0x89, 0xe1, 0xf7, 0x36, 0x08,
	0x6d, 0x23, 0x8d, 0x34, 0x45, 0xf1, 0x08, 0xb5, 0x92, 0xb2, 0xf7, 0x61, 0x2d, 0x76, 0x3e, 0x3c,
	0xfd, 0x3b, 0x97, 0x79, 0x7a, 0x96, 0xcb, 0x9c, 0x9e, 0xe5, 0xc8, 0xb3, 0xb3, 0x1c, 0xf9, 0xeb,
	0x2c, 0x47, 0x9e, 0x9c, 0xe7, 0x32, 0xcf, 0xce, 0x73, 0x99, 0x3f, 0xcf, 0x73, 0x99, 0xcf, 0x36,
	0xea, 0xb6, 0xdc, 0x6f, 0x57, 0x8c, 0x2a, 0x6f, 0x9a, 0xd2, 0x15, 0xb2, 0x61, 0x55, 0x44, 0xd7,
	0xf4, 0xe7, 0x81, 0x71, 0xd9, 0x69, 0x31, 0x51, 0x19, 0x57, 0x5f, 0xc3, 0xf7, 0xfe, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x96, 0x81, 0x77, 0x88, 0x28, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryInterchainAccountFromAddress returns the interchain account for given
	// owner address on a given connection pair
	InterchainAccountFromAddress(ctx context.Context, in *QueryInterchainAccountFromAddressRequest, opts ...grpc.CallOption) (*QueryInterchainAccountFromAddressResponse, error)
	// Flow returns the auto-executing interchain account tx
	Flow(ctx context.Context, in *QueryFlowRequest, opts ...grpc.CallOption) (*QueryFlowResponse, error)
	// FlowHistory returns the flow history
	FlowHistory(ctx context.Context, in *QueryFlowHistoryRequest, opts ...grpc.CallOption) (*QueryFlowHistoryResponse, error)
	// Flows returns the all flows
	Flows(ctx context.Context, in *QueryFlowsRequest, opts ...grpc.CallOption) (*QueryFlowsResponse, error)
	// FlowsForOwner returns all flows for a given owner
	FlowsForOwner(ctx context.Context, in *QueryFlowsForOwnerRequest, opts ...grpc.CallOption) (*QueryFlowsForOwnerResponse, error)
	// TrustlessAgent returns the trustless agent information for a given hosted address
	TrustlessAgent(ctx context.Context, in *QueryTrustlessAgentRequest, opts ...grpc.CallOption) (*QueryTrustlessAgentResponse, error)
	// TrustlessAgents returns all trustless agents
	TrustlessAgents(ctx context.Context, in *QueryTrustlessAgentsRequest, opts ...grpc.CallOption) (*QueryTrustlessAgentsResponse, error)
	// TrustlessAgentsByFeeAdmin returns all trustless agents for a given fee admin address
	TrustlessAgentsByFeeAdmin(ctx context.Context, in *QueryTrustlessAgentsByFeeAdminRequest, opts ...grpc.CallOption) (*QueryTrustlessAgentsByFeeAdminResponse, error)
	// Params returns the total set of Intent parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TotalBurnt returns the total amount of coins that have been burnt
	TotalBurnt(ctx context.Context, in *QueryTotalBurntRequest, opts ...grpc.CallOption) (*QueryTotalBurntResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) InterchainAccountFromAddress(ctx context.Context, in *QueryInterchainAccountFromAddressRequest, opts ...grpc.CallOption) (*QueryInterchainAccountFromAddressResponse, error) {
	out := new(QueryInterchainAccountFromAddressResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/InterchainAccountFromAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Flow(ctx context.Context, in *QueryFlowRequest, opts ...grpc.CallOption) (*QueryFlowResponse, error) {
	out := new(QueryFlowResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/Flow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FlowHistory(ctx context.Context, in *QueryFlowHistoryRequest, opts ...grpc.CallOption) (*QueryFlowHistoryResponse, error) {
	out := new(QueryFlowHistoryResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/FlowHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Flows(ctx context.Context, in *QueryFlowsRequest, opts ...grpc.CallOption) (*QueryFlowsResponse, error) {
	out := new(QueryFlowsResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/Flows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FlowsForOwner(ctx context.Context, in *QueryFlowsForOwnerRequest, opts ...grpc.CallOption) (*QueryFlowsForOwnerResponse, error) {
	out := new(QueryFlowsForOwnerResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/FlowsForOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrustlessAgent(ctx context.Context, in *QueryTrustlessAgentRequest, opts ...grpc.CallOption) (*QueryTrustlessAgentResponse, error) {
	out := new(QueryTrustlessAgentResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/TrustlessAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrustlessAgents(ctx context.Context, in *QueryTrustlessAgentsRequest, opts ...grpc.CallOption) (*QueryTrustlessAgentsResponse, error) {
	out := new(QueryTrustlessAgentsResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/TrustlessAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrustlessAgentsByFeeAdmin(ctx context.Context, in *QueryTrustlessAgentsByFeeAdminRequest, opts ...grpc.CallOption) (*QueryTrustlessAgentsByFeeAdminResponse, error) {
	out := new(QueryTrustlessAgentsByFeeAdminResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/TrustlessAgentsByFeeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalBurnt(ctx context.Context, in *QueryTotalBurntRequest, opts ...grpc.CallOption) (*QueryTotalBurntResponse, error) {
	out := new(QueryTotalBurntResponse)
	err := c.cc.Invoke(ctx, "/intento.intent.v1.Query/TotalBurnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryInterchainAccountFromAddress returns the interchain account for given
	// owner address on a given connection pair
	InterchainAccountFromAddress(context.Context, *QueryInterchainAccountFromAddressRequest) (*QueryInterchainAccountFromAddressResponse, error)
	// Flow returns the auto-executing interchain account tx
	Flow(context.Context, *QueryFlowRequest) (*QueryFlowResponse, error)
	// FlowHistory returns the flow history
	FlowHistory(context.Context, *QueryFlowHistoryRequest) (*QueryFlowHistoryResponse, error)
	// Flows returns the all flows
	Flows(context.Context, *QueryFlowsRequest) (*QueryFlowsResponse, error)
	// FlowsForOwner returns all flows for a given owner
	FlowsForOwner(context.Context, *QueryFlowsForOwnerRequest) (*QueryFlowsForOwnerResponse, error)
	// TrustlessAgent returns the trustless agent information for a given hosted address
	TrustlessAgent(context.Context, *QueryTrustlessAgentRequest) (*QueryTrustlessAgentResponse, error)
	// TrustlessAgents returns all trustless agents
	TrustlessAgents(context.Context, *QueryTrustlessAgentsRequest) (*QueryTrustlessAgentsResponse, error)
	// TrustlessAgentsByFeeAdmin returns all trustless agents for a given fee admin address
	TrustlessAgentsByFeeAdmin(context.Context, *QueryTrustlessAgentsByFeeAdminRequest) (*QueryTrustlessAgentsByFeeAdminResponse, error)
	// Params returns the total set of Intent parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TotalBurnt returns the total amount of coins that have been burnt
	TotalBurnt(context.Context, *QueryTotalBurntRequest) (*QueryTotalBurntResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) InterchainAccountFromAddress(ctx context.Context, req *QueryInterchainAccountFromAddressRequest) (*QueryInterchainAccountFromAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterchainAccountFromAddress not implemented")
}
func (*UnimplementedQueryServer) Flow(ctx context.Context, req *QueryFlowRequest) (*QueryFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flow not implemented")
}
func (*UnimplementedQueryServer) FlowHistory(ctx context.Context, req *QueryFlowHistoryRequest) (*QueryFlowHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowHistory not implemented")
}
func (*UnimplementedQueryServer) Flows(ctx context.Context, req *QueryFlowsRequest) (*QueryFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flows not implemented")
}
func (*UnimplementedQueryServer) FlowsForOwner(ctx context.Context, req *QueryFlowsForOwnerRequest) (*QueryFlowsForOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowsForOwner not implemented")
}
func (*UnimplementedQueryServer) TrustlessAgent(ctx context.Context, req *QueryTrustlessAgentRequest) (*QueryTrustlessAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrustlessAgent not implemented")
}
func (*UnimplementedQueryServer) TrustlessAgents(ctx context.Context, req *QueryTrustlessAgentsRequest) (*QueryTrustlessAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrustlessAgents not implemented")
}
func (*UnimplementedQueryServer) TrustlessAgentsByFeeAdmin(ctx context.Context, req *QueryTrustlessAgentsByFeeAdminRequest) (*QueryTrustlessAgentsByFeeAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrustlessAgentsByFeeAdmin not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TotalBurnt(ctx context.Context, req *QueryTotalBurntRequest) (*QueryTotalBurntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalBurnt not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_InterchainAccountFromAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInterchainAccountFromAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterchainAccountFromAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/InterchainAccountFromAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterchainAccountFromAddress(ctx, req.(*QueryInterchainAccountFromAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Flow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Flow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/Flow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Flow(ctx, req.(*QueryFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FlowHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlowHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FlowHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/FlowHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FlowHistory(ctx, req.(*QueryFlowHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Flows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Flows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/Flows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Flows(ctx, req.(*QueryFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FlowsForOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFlowsForOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FlowsForOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/FlowsForOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FlowsForOwner(ctx, req.(*QueryFlowsForOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrustlessAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrustlessAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrustlessAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/TrustlessAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrustlessAgent(ctx, req.(*QueryTrustlessAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrustlessAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrustlessAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrustlessAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/TrustlessAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrustlessAgents(ctx, req.(*QueryTrustlessAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrustlessAgentsByFeeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrustlessAgentsByFeeAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrustlessAgentsByFeeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/TrustlessAgentsByFeeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrustlessAgentsByFeeAdmin(ctx, req.(*QueryTrustlessAgentsByFeeAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalBurnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalBurntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalBurnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intento.intent.v1.Query/TotalBurnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalBurnt(ctx, req.(*QueryTotalBurntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intento.intent.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InterchainAccountFromAddress",
			Handler:    _Query_InterchainAccountFromAddress_Handler,
		},
		{
			MethodName: "Flow",
			Handler:    _Query_Flow_Handler,
		},
		{
			MethodName: "FlowHistory",
			Handler:    _Query_FlowHistory_Handler,
		},
		{
			MethodName: "Flows",
			Handler:    _Query_Flows_Handler,
		},
		{
			MethodName: "FlowsForOwner",
			Handler:    _Query_FlowsForOwner_Handler,
		},
		{
			MethodName: "TrustlessAgent",
			Handler:    _Query_TrustlessAgent_Handler,
		},
		{
			MethodName: "TrustlessAgents",
			Handler:    _Query_TrustlessAgents_Handler,
		},
		{
			MethodName: "TrustlessAgentsByFeeAdmin",
			Handler:    _Query_TrustlessAgentsByFeeAdmin_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TotalBurnt",
			Handler:    _Query_TotalBurnt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intento/intent/v1/query.proto",
}

func (m *QueryInterchainAccountFromAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInterchainAccountFromAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInterchainAccountFromAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInterchainAccountFromAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInterchainAccountFromAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInterchainAccountFromAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterchainAccountAddress) > 0 {
		i -= len(m.InterchainAccountAddress)
		copy(dAtA[i:], m.InterchainAccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InterchainAccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Flow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFlowHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Flows) > 0 {
		for iNdEx := len(m.Flows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowsForOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowsForOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowsForOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlowsForOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlowsForOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlowsForOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Flows) > 0 {
		for iNdEx := len(m.Flows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTrustlessAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrustlessAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrustlessAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrustlessAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrustlessAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrustlessAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TrustlessAgent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTrustlessAgentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrustlessAgentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrustlessAgentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrustlessAgentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrustlessAgentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrustlessAgentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TrustlessAgents) > 0 {
		for iNdEx := len(m.TrustlessAgents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustlessAgents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrustlessAgentsByFeeAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrustlessAgentsByFeeAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrustlessAgentsByFeeAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeAdmin) > 0 {
		i -= len(m.FeeAdmin)
		copy(dAtA[i:], m.FeeAdmin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeAdmin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrustlessAgentsByFeeAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrustlessAgentsByFeeAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrustlessAgentsByFeeAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TrustlessAgents) > 0 {
		for iNdEx := len(m.TrustlessAgents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustlessAgents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalBurntRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBurntRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBurntRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalBurntResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBurntResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBurntResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalBurnt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryInterchainAccountFromAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInterchainAccountFromAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterchainAccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Flow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFlowHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Flows) > 0 {
		for _, e := range m.Flows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowsForOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFlowsForOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Flows) > 0 {
		for _, e := range m.Flows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTrustlessAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrustlessAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TrustlessAgent.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTrustlessAgentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrustlessAgentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrustlessAgents) > 0 {
		for _, e := range m.TrustlessAgents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrustlessAgentsByFeeAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeAdmin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrustlessAgentsByFeeAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrustlessAgents) > 0 {
		for _, e := range m.TrustlessAgents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalBurntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalBurntResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalBurnt.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryInterchainAccountFromAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInterchainAccountFromAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInterchainAccountFromAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, FlowHistoryEntry{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flows = append(m.Flows, Flow{})
			if err := m.Flows[len(m.Flows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowsForOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowsForOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowsForOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlowsForOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlowsForOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlowsForOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flows = append(m.Flows, Flow{})
			if err := m.Flows[len(m.Flows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrustlessAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrustlessAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrustlessAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrustlessAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrustlessAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrustlessAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustlessAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrustlessAgent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrustlessAgentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrustlessAgentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrustlessAgentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrustlessAgentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrustlessAgentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrustlessAgentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustlessAgents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustlessAgents = append(m.TrustlessAgents, TrustlessAgent{})
			if err := m.TrustlessAgents[len(m.TrustlessAgents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrustlessAgentsByFeeAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrustlessAgentsByFeeAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrustlessAgentsByFeeAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrustlessAgentsByFeeAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrustlessAgentsByFeeAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrustlessAgentsByFeeAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustlessAgents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustlessAgents = append(m.TrustlessAgents, TrustlessAgent{})
			if err := m.TrustlessAgents[len(m.TrustlessAgents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBurntRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBurntRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBurntRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBurntResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBurntResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBurntResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBurnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBurnt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

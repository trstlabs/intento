// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intento/intent/v1beta1/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the params for activeness of Flows on governance proposals.
type Params struct {
	// Commision rate percentage for returning remaining funds in flow fee account after final execution, e.g. 100 = 1X, 250 = 250
	FlowFundsCommission int64 `protobuf:"varint,1,opt,name=flow_funds_commission,json=flowFundsCommission,proto3" json:"flow_funds_commission,omitempty"`
	// Multiplier to the flexible flow gas fee in promille, e.g. 1000 = 1X, 2500 = 2,5x
	FlowFlexFeeMul int64 `protobuf:"varint,2,opt,name=flow_flex_fee_mul,json=flowFlexFeeMul,proto3" json:"flow_flex_fee_mul,omitempty"`
	// Fixed burn fee per message execution to burn native denom
	BurnFeePerMsg int64 `protobuf:"varint,3,opt,name=burn_fee_per_msg,json=burnFeePerMsg,proto3" json:"burn_fee_per_msg,omitempty"`
	// Array of denoms that can be used for fee payment together with an amount
	GasFeeCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=gas_fee_coins,json=gasFeeCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"gas_fee_coins" yaml:"gas_fee_coins"`
	//  Maximum period for a flow
	MaxFlowDuration time.Duration `protobuf:"bytes,5,opt,name=max_flow_duration,json=maxFlowDuration,proto3,stdduration" json:"max_flow_duration,omitempty"`
	//  Minimum period for a flow
	MinFlowDuration time.Duration `protobuf:"bytes,6,opt,name=min_flow_duration,json=minFlowDuration,proto3,stdduration" json:"min_flow_duration,omitempty"`
	//  Minimum period for a flow
	MinFlowInterval time.Duration `protobuf:"bytes,8,opt,name=min_flow_interval,json=minFlowInterval,proto3,stdduration" json:"min_flow_interval,omitempty"`
	// relayer rewards in uinto for each message type 0=SDK,1=Wasm, 2=Osmo.
	// Rewards are in uinto and topped up in the module account by alloc module.
	RelayerRewards []int64 `protobuf:"varint,9,rep,packed,name=relayer_rewards,json=relayerRewards,proto3" json:"relayer_rewards,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f869cd012e617b1c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "intento.intent.v1beta1.Params")
}

func init() {
	proto.RegisterFile("intento/intent/v1beta1/params.proto", fileDescriptor_f869cd012e617b1c)
}

var fileDescriptor_f869cd012e617b1c = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xb6, 0x49, 0x1b, 0x81, 0xab, 0x52, 0x6a, 0x0a, 0x32, 0x45, 0x3a, 0x47, 0x61, 0x48, 0x40,
	0xe0, 0x53, 0xcb, 0xd6, 0x31, 0x45, 0x11, 0x48, 0x54, 0xaa, 0x32, 0xb2, 0x58, 0xe7, 0xe4, 0xc5,
	0x9c, 0xb8, 0x1f, 0xd1, 0xdd, 0xb9, 0x71, 0xfe, 0x02, 0x56, 0xc6, 0xb2, 0x31, 0x22, 0xfe, 0x92,
	0x8c, 0x1d, 0x99, 0x52, 0x48, 0x36, 0x46, 0xfe, 0x02, 0xe4, 0xb3, 0x5d, 0x41, 0xab, 0x4a, 0x74,
	0x7a, 0x77, 0xef, 0x7d, 0xdf, 0x7d, 0xf7, 0xbe, 0xbb, 0xe7, 0x3d, 0xa1, 0xc2, 0x80, 0x30, 0x12,
	0x97, 0x11, 0x9f, 0xec, 0x25, 0x60, 0xc8, 0x1e, 0x9e, 0x10, 0x45, 0xb8, 0x8e, 0x26, 0x4a, 0x1a,
	0xe9, 0x3f, 0xac, 0x40, 0x51, 0x19, 0xa3, 0x0a, 0xb4, 0x8b, 0x86, 0x52, 0x73, 0xa9, 0x71, 0x42,
	0x34, 0x5c, 0x30, 0x87, 0x92, 0x8a, 0x92, 0xb7, 0xbb, 0x93, 0xca, 0x54, 0xda, 0x25, 0x2e, 0x56,
	0x55, 0x16, 0xa5, 0x52, 0xa6, 0x0c, 0xb0, 0xdd, 0x25, 0xd9, 0x18, 0x8f, 0x32, 0x45, 0x0c, 0x95,
	0x15, 0xab, 0xfd, 0x79, 0xdd, 0x6b, 0x1e, 0x5b, 0x79, 0x7f, 0xdf, 0x7b, 0x30, 0x66, 0x72, 0x1a,
	0x8f, 0x33, 0x31, 0xd2, 0xf1, 0x50, 0x72, 0x4e, 0xb5, 0xa6, 0x52, 0x04, 0x6e, 0xcb, 0xed, 0x36,
	0x06, 0xf7, 0x8b, 0x62, 0xbf, 0xa8, 0x1d, 0x5e, 0x94, 0xfc, 0xa7, 0xde, 0x76, 0xc9, 0x61, 0x90,
	0xc7, 0x63, 0x80, 0x98, 0x67, 0x2c, 0xb8, 0x65, 0xf1, 0x77, 0x2d, 0x9e, 0x41, 0xde, 0x07, 0x38,
	0xca, 0x98, 0xdf, 0xf1, 0xee, 0x25, 0x99, 0x12, 0x16, 0x35, 0x01, 0x15, 0x73, 0x9d, 0x06, 0x0d,
	0x8b, 0xdc, 0x2c, 0xf2, 0x7d, 0x80, 0x63, 0x50, 0x47, 0x3a, 0xf5, 0x3f, 0xba, 0xde, 0x66, 0x4a,
	0xb4, 0x05, 0x16, 0xfd, 0xe9, 0x60, 0xad, 0xd5, 0xe8, 0x6e, 0xec, 0x3f, 0x8a, 0x4a, 0x07, 0xa2,
	0xc2, 0x81, 0xda, 0x96, 0xe8, 0x50, 0x52, 0xd1, 0x7b, 0x3d, 0x5f, 0x84, 0xce, 0xef, 0x45, 0xb8,
	0x33, 0x23, 0x9c, 0x1d, 0xb4, 0xff, 0x61, 0xb7, 0xbf, 0x9d, 0x87, 0xdd, 0x94, 0x9a, 0xf7, 0x59,
	0x12, 0x0d, 0x25, 0xc7, 0x95, 0x8d, 0x65, 0x78, 0xa1, 0x47, 0x1f, 0xb0, 0x99, 0x4d, 0x40, 0xdb,
	0x83, 0xf4, 0x60, 0x23, 0x25, 0xba, 0x0f, 0x60, 0x37, 0xbe, 0xf0, 0xb6, 0x39, 0xc9, 0x63, 0xdb,
	0x61, 0xed, 0x5b, 0xb0, 0xde, 0x72, 0xed, 0x65, 0x4a, 0x63, 0xa3, 0xda, 0xd8, 0xe8, 0x55, 0x05,
	0xe8, 0x75, 0x8a, 0xcb, 0xfc, 0x5a, 0x84, 0x8f, 0xaf, 0x70, 0x9f, 0x4b, 0x4e, 0x0d, 0xf0, 0x89,
	0x99, 0x9d, 0x9e, 0x87, 0xee, 0x60, 0x8b, 0x93, 0xbc, 0xcf, 0xe4, 0xb4, 0x66, 0x5a, 0x3d, 0x2a,
	0x2e, 0xe9, 0x35, 0xff, 0x5f, 0xef, 0x32, 0xf7, 0x8a, 0x1e, 0x15, 0xd7, 0xea, 0x15, 0xbf, 0x4d,
	0x9d, 0x10, 0x16, 0xdc, 0xbe, 0xb9, 0x5e, 0xcd, 0xbd, 0x46, 0xef, 0x4d, 0x55, 0xf6, 0x3b, 0xde,
	0x96, 0x02, 0x46, 0x66, 0xa0, 0x62, 0x05, 0x53, 0xa2, 0x46, 0x3a, 0xb8, 0xd3, 0x6a, 0x14, 0x7f,
	0xa5, 0x4a, 0x0f, 0xca, 0xec, 0xc1, 0xda, 0xe9, 0x97, 0xd0, 0xe9, 0xbd, 0x9d, 0xff, 0x44, 0xce,
	0xd7, 0x25, 0x72, 0xe7, 0x4b, 0xe4, 0x9e, 0x2d, 0x91, 0xfb, 0x63, 0x89, 0xdc, 0x4f, 0x2b, 0xe4,
	0x9c, 0xad, 0x90, 0xf3, 0x7d, 0x85, 0x9c, 0x77, 0xcf, 0xfe, 0x7a, 0x57, 0xa3, 0xb4, 0x61, 0x24,
	0xd1, 0xb8, 0x1e, 0xb2, 0xbc, 0x1e, 0x33, 0xfb, 0xbe, 0x49, 0xd3, 0x76, 0xf2, 0xf2, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe4, 0xfe, 0x52, 0x44, 0x85, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FlowFundsCommission != that1.FlowFundsCommission {
		return false
	}
	if this.FlowFlexFeeMul != that1.FlowFlexFeeMul {
		return false
	}
	if this.BurnFeePerMsg != that1.BurnFeePerMsg {
		return false
	}
	if len(this.GasFeeCoins) != len(that1.GasFeeCoins) {
		return false
	}
	for i := range this.GasFeeCoins {
		if !this.GasFeeCoins[i].Equal(&that1.GasFeeCoins[i]) {
			return false
		}
	}
	if this.MaxFlowDuration != that1.MaxFlowDuration {
		return false
	}
	if this.MinFlowDuration != that1.MinFlowDuration {
		return false
	}
	if this.MinFlowInterval != that1.MinFlowInterval {
		return false
	}
	if len(this.RelayerRewards) != len(that1.RelayerRewards) {
		return false
	}
	for i := range this.RelayerRewards {
		if this.RelayerRewards[i] != that1.RelayerRewards[i] {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayerRewards) > 0 {
		dAtA2 := make([]byte, len(m.RelayerRewards)*10)
		var j1 int
		for _, num1 := range m.RelayerRewards {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintParams(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MinFlowInterval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinFlowInterval):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MinFlowDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinFlowDuration):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintParams(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MaxFlowDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxFlowDuration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintParams(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	if len(m.GasFeeCoins) > 0 {
		for iNdEx := len(m.GasFeeCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasFeeCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BurnFeePerMsg != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BurnFeePerMsg))
		i--
		dAtA[i] = 0x18
	}
	if m.FlowFlexFeeMul != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FlowFlexFeeMul))
		i--
		dAtA[i] = 0x10
	}
	if m.FlowFundsCommission != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FlowFundsCommission))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowFundsCommission != 0 {
		n += 1 + sovParams(uint64(m.FlowFundsCommission))
	}
	if m.FlowFlexFeeMul != 0 {
		n += 1 + sovParams(uint64(m.FlowFlexFeeMul))
	}
	if m.BurnFeePerMsg != 0 {
		n += 1 + sovParams(uint64(m.BurnFeePerMsg))
	}
	if len(m.GasFeeCoins) > 0 {
		for _, e := range m.GasFeeCoins {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxFlowDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinFlowDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinFlowInterval)
	n += 1 + l + sovParams(uint64(l))
	if len(m.RelayerRewards) > 0 {
		l = 0
		for _, e := range m.RelayerRewards {
			l += sovParams(uint64(e))
		}
		n += 1 + sovParams(uint64(l)) + l
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowFundsCommission", wireType)
			}
			m.FlowFundsCommission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowFundsCommission |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowFlexFeeMul", wireType)
			}
			m.FlowFlexFeeMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowFlexFeeMul |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFeePerMsg", wireType)
			}
			m.BurnFeePerMsg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurnFeePerMsg |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFeeCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasFeeCoins = append(m.GasFeeCoins, types.Coin{})
			if err := m.GasFeeCoins[len(m.GasFeeCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFlowDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MaxFlowDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFlowDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MinFlowDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFlowInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MinFlowInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RelayerRewards = append(m.RelayerRewards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthParams
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthParams
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RelayerRewards) == 0 {
					m.RelayerRewards = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RelayerRewards = append(m.RelayerRewards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRewards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
